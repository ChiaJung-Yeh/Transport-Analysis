[["資料清洗與處理.html", "Chapter 2 資料清洗與處理 2.1 data.frame 與 data.table 2.2 合併資料 2.3 選取資料欄位 2.4 依條件篩選資料 2.5 新增資料屬性 2.6 條件判斷 2.7 資料排序 2.8 資料分群與統計 2.9 連接資料 2.10 去除重複資料 2.11 資料集合 2.12 資料型態轉換", " Chapter 2 資料清洗與處理 資料清洗與處理是分析前的第一步，透過此一步驟可初步觀察資料的趨勢，並以圖表呈現敘述統計結果。此外，在經過完善的資料整理後，尚能進一步建構統計模型或數據分析工具以瞭解資料背後所衍伸之意涵。dplyr與data.table套件是 R 語言中兩大最常見的資料處理工具，請務必安裝並導入該套件。 資料清洗與處理常用之套件與函式彙整如表2.1。 表 2.1: 資料處理重要函式 套件 函式 功能 base merge() 根據指定欄位連接兩資料 dplyr bind_rows() 合併橫列 bind_cols() 合併直行 select() 選取特定欄位 filter() 根據條件篩選資料 mutate() 新增資料屬性（直行） group_by() 將資料依據特定欄位分群` summarise() 將分群的資料予以計算 reframe() 將分群的資料予以計算 slice() 依據分群擷取特定資料 left_join() 根據指定欄位連接兩資料（僅保留左側資料） inner_join() 根據指定欄位連接兩資料（擁有的資料皆須保留） full_join() 根據指定欄位連接兩資料（僅保留共同擁有的資料） arrange() 根據指定欄位將資料排序 rename() 更改欄位名稱 distinct() 去除重複資料 intersect() 尋找兩資料中共同擁有的資料列（交集） union() 保留所有擁有的資料列（聯集，去除重複者） union_all() 保留所有擁有的資料列（聯集，保留重複者） setdiff() 尋找唯獨左側資料擁有的資料列（差集） symdiff() 尋找唯獨其中一份資料擁有的資料列（互斥） setequal() 檢查兩資料是否完全相同（無論排序） case_when() 條件判斷 data.table setDT() 將資料轉換為data.table形式 setkey() 設定data.table資料的主鍵 merge.data.table() 連接資料 dcast() 轉換長資料為寬資料 melt() 轉換寬資料為長資料 為展示「資料清洗與處理」過程，後續範例中我們會使用的資料如下，請先讀取之。 # 世界國家資料 world=read.csv(&quot;https://raw.githubusercontent.com/ChiaJung-Yeh/Transport-Analysis/master/Data/world.csv&quot;) # 咖啡產量資料 coffee=read.csv(&quot;https://raw.githubusercontent.com/ChiaJung-Yeh/Transport-Analysis/master/Data/coffee.csv&quot;) 世界國家資料（world）中詳記各國資訊，包括人口數（pop）、面積（area_km2）、lifeExp（壽命）、gdpPerCap（人均 GDP）等；咖啡（coffee）資料中詳記世界各國 2016 與 2017 年的咖啡產量。 2.1 data.frame 與 data.table dplyr與data.table套件所提供的各函式大多功能皆相同，惟使用data.table套件的函式時，必須將資料型別新增 data.table 之格式，尚能正確分析。此外，data.table套件的執行效率通常較高，在大數據處理上極具優勢（依據實務經驗而論，若處理的資料筆數上達千萬筆，建議使用data.table套件），而若數據量較小時兩者的速度不相上下。關於兩資料分析套件的速度比較請參考以下文章： Comparing Efficiency and Speed of data.table data.table speed with dplyr syntax ⌾ 新增 data.table 資料格式 若欲針對原 data.frame 新增 data.table 之資料格式，可利用setDT()函式新增之，以world資料為例，程式碼撰寫如下。 # 使用read.csv()讀取資料 -&gt; data.frame() world_DT=read.csv(&quot;https://raw.githubusercontent.com/ChiaJung-Yeh/Transport-Analysis/master/Data/world.csv&quot;) # 查看資料型態 class(world_DT) ## [1] &quot;data.frame&quot; # setDT()函式新增data.table格式 setDT(world_DT) # 再次查看資料型態 class(world_DT) ## [1] &quot;data.table&quot; &quot;data.frame&quot; 由最後輸出結果可知，world_DT資料經過setDT()函式設定後即新增 data.table 格式，同時亦會保留 data.frame 格式。 ⌾ 新增主鍵 主鍵是資料中用以標示「關鍵的」屬性欄位，「關鍵」意謂該欄位具有唯一性，可以用其檢索整份資料，不會重複匹配至多比不同的資料。舉例而言，在考生成績的資料中，我們會利用學生的學號、姓名等作為主鍵，因為其具有代表性，可以表示特定資料；然而，我們不會利用學生的分數作為主鍵，因為分數值很可能是重複的，無法表示特定一筆資料。 根據上述，在 data.table 的資料格式中，主鍵是相當關鍵的要素，亦為使data.table套件效率甚高的其一原因。以world_DT資料為例，將「name_long」（國家名稱）設定為主鍵，函式撰寫如下。 # 建立主鍵 setDT(world_DT, name_long) 2.2 合併資料 在第一章節中，我們曾提及資料框的行列合併，包含rbind()與cbind()兩函式，而dplyr套件所提供的bind_rows()與bind_cols()其目的相同，前者用以合併橫列；後者用以合併直行。其中bind_cols()與cbind()兩者功能完全相同。惟rbind()函式的使用前提是，輸入的兩資料必須擁有完全相同的欄位，一旦其中一個欄位不符合即無法合併資料。bind_rows()函式則可較彈性合併資料，針對共同擁有的欄位予以合併，其他則忽略之。具體範例如下。 # 建立兩資料 score_data1=data.frame(Student=c(&quot;Robert&quot;, &quot;Jessie&quot;, &quot;Rose&quot;, &quot;John&quot;), Class=c(&quot;A&quot;, &quot;B&quot;, &quot;D&quot;, &quot;C&quot;), Score=c(&quot;80&quot;, &quot;95&quot;, &quot;70&quot;, &quot;65&quot;)) score_data2=data.frame(Student=c(&quot;Penny&quot;, &quot;Ruby&quot;, &quot;Tom&quot;), Score=c(&quot;90&quot;, &quot;70&quot;, &quot;50&quot;)) rbind(score_data1, score_data2) ## Error in rbind(deparse.level, ...): 變數的行數無效 由以上rbind()函式之範例可知，由於score_data1含有「Class」欄位，而score_data2並不包含，故無法成功合併兩資料。此時可嘗試利用bind_rows()函式，程式碼撰寫如下。 bind_rows(score_data1, score_data2) ## Student Class Score ## 1 Robert A 80 ## 2 Jessie B 95 ## 3 Rose D 70 ## 4 John C 65 ## 5 Penny &lt;NA&gt; 90 ## 6 Ruby &lt;NA&gt; 70 ## 7 Tom &lt;NA&gt; 50 輸出結果中，score_data2雖並無「Class」欄位，仍可將兩資料予以合併，並在缺失的資料中填補NA。 2.3 選取資料欄位 在第一章節中，我們曾提及資料框選取欄位的方法，而dplyr套建亦提供相同功能的select()函式，函式撰寫如下。 select(資料, 欄位名稱1, 欄位名稱2, ...) ⌾ 選取欄位 以選取world資料中的「name_long」和「area_km2」兩欄位為例，程式碼撰寫如下。 # 選取name_long與area_km2兩欄位 world_sel1=select(world, name_long, area_km2) # 查看前六筆資料 head(world_sel1) ## name_long area_km2 ## 1 Fiji 19289.97 ## 2 Tanzania 932745.79 ## 3 Western Sahara 96270.60 ## 4 Canada 10036042.98 ## 5 United States 9510743.74 ## 6 Kazakhstan 2729810.51 使用data.table套件選取欄位，程式碼撰寫如下。 world_DT[, .(name_long, area_km2)] 其他寫法包括（請回顧選取欄位章節）： # 給定欄位索引 world[, c(1,7)] # 給定欄位名稱 world[, c(&quot;name_long&quot;, &quot;area_km2&quot;)] # 回傳單一欄位 world$name_long world$area_km2 此外，亦可將欲返回的欄位儲存於一文字向量中，並透過all_of()函式回傳之，程式碼撰寫如下。 # 選取name_long與area_km2兩欄位 sel_col_name=c(&quot;name_long&quot;, &quot;continent&quot;, &quot;subregion&quot;) # 使用all_of()函式 world_sel2=select(world, all_of(sel_col_name)) # 查看前六筆資料 head(world_sel2) ## name_long continent subregion ## 1 Fiji Oceania Melanesia ## 2 Tanzania Africa Eastern Africa ## 3 Western Sahara Africa Northern Africa ## 4 Canada North America Northern America ## 5 United States North America Northern America ## 6 Kazakhstan Asia Central Asia 使用data.table套件選取欄位，程式碼撰寫如下。 world_DT[, ..sel_col_name] ⌾ 刪除欄位 若欲刪除特定欄位，可利用-在欄位名稱前即可刪除之。 # 刪除continent、region_un、subregion、type欄位 world_sel3=select(world, -continent, -region_un, -subregion, -type) # 查看前六筆資料 head(world_sel3) ## iso_a2 name_long area_km2 pop lifeExp gdpPercap ## 1 FJ Fiji 19289.97 885806 69.96000 8222.254 ## 2 TZ Tanzania 932745.79 52234869 64.16300 2402.099 ## 3 EH Western Sahara 96270.60 NA NA NA ## 4 CA Canada 10036042.98 35535348 81.95305 43079.143 ## 5 US United States 9510743.74 318622525 78.84146 51921.985 ## 6 KZ Kazakhstan 2729810.51 17288285 71.62000 23587.338 使用data.table套件刪除欄位，程式碼撰寫如下。 del_col_name=c(&quot;continent&quot;,&quot;region_un&quot;,&quot;subregion&quot;,&quot;type&quot;) world_DT[, !..del_col_name] 2.4 依條件篩選資料 條件篩選資料可以利用filter()函式達成之，函式撰寫如下。 filter(資料, 條件1, 條件2, ...) 以上條件1與條件2是用以篩選資料中符合條件者，最終所回傳的資料必然符合函式內所有的條件。 ⌾ 數值向量篩選 以篩選world資料中，人口數（pop）超過 1 億人者。 # 篩選人口數超過1億的資料 world_fil1=filter(world, pop&gt;100000000) # 查看前六筆資料 head(world_fil1) ## iso_a2 name_long continent region_un subregion ## 1 US United States North America Americas Northern America ## 2 ID Indonesia Asia Asia South-Eastern Asia ## 3 RU Russian Federation Europe Europe Eastern Europe ## 4 MX Mexico North America Americas Central America ## 5 BR Brazil South America Americas South America ## 6 NG Nigeria Africa Africa Western Africa ## type area_km2 pop lifeExp gdpPercap ## 1 Country 9510743.7 318622525 78.84146 51921.985 ## 2 Sovereign country 1819251.3 255131116 68.85600 10003.089 ## 3 Sovereign country 17018507.4 143819666 70.74366 25284.586 ## 4 Sovereign country 1969480.3 124221600 76.75300 16622.597 ## 5 Sovereign country 8508557.1 204213133 75.04200 15374.262 ## 6 Sovereign country 905071.7 176460502 52.54900 5671.901 # 查看查看符合條件的總資料筆數（亦即國家數） nrow(world_fil1) ## [1] 12 使用data.table套件篩選資料，程式碼撰寫如下。 world_DT[pop&gt;100000000] ⌾ 文字向量篩選 通常文字篩選時會利用%in%以查看一向量各元素是否存在於另一向量中，請參照向量 Vector小節中「⌾ 檢查元素是否包含於向量」。 以篩選world資料中，所在洲隸屬於亞洲（Asia）以及歐洲（Europe）者。 # filter data by population world_fil2=filter(world, continent %in% c(&quot;Asia&quot;, &quot;Europe&quot;)) # check out the first 6 rows head(world_fil2) ## iso_a2 name_long continent region_un subregion ## 1 KZ Kazakhstan Asia Asia Central Asia ## 2 UZ Uzbekistan Asia Asia Central Asia ## 3 ID Indonesia Asia Asia South-Eastern Asia ## 4 RU Russian Federation Europe Europe Eastern Europe ## 5 NO Norway Europe Europe Northern Europe ## 6 TL Timor-Leste Asia Asia South-Eastern Asia ## type area_km2 pop lifeExp gdpPercap ## 1 Sovereign country 2729810.51 17288285 71.62000 23587.338 ## 2 Sovereign country 461410.26 30757700 71.03900 5370.866 ## 3 Sovereign country 1819251.33 255131116 68.85600 10003.089 ## 4 Sovereign country 17018507.41 143819666 70.74366 25284.586 ## 5 Sovereign country 397994.63 NA NA NA ## 6 Sovereign country 14714.93 1212814 68.28500 6262.906 使用data.table套件篩選資料，程式碼撰寫如下。 world_DT[continent %in% c(&quot;Asia&quot;, &quot;Europe&quot;)] ⌾ 多重條件篩選（AND） 在filter()函式中所設定的諸多條件皆須滿足尚會進一步保留資料。以world資料為例，篩選洲隸屬於亞洲以及歐洲，且人口數超過 1 億者。程式碼撰寫如下。 # 依條件篩選資料 world_fil3=filter(world, continent %in% c(&quot;Asia&quot;, &quot;Europe&quot;), pop&gt;100000000) # 查看前六筆資料 head(world_fil3) ## iso_a2 name_long continent region_un subregion ## 1 ID Indonesia Asia Asia South-Eastern Asia ## 2 RU Russian Federation Europe Europe Eastern Europe ## 3 IN India Asia Asia Southern Asia ## 4 BD Bangladesh Asia Asia Southern Asia ## 5 PK Pakistan Asia Asia Southern Asia ## 6 CN China Asia Asia Eastern Asia ## type area_km2 pop lifeExp gdpPercap ## 1 Sovereign country 1819251.3 255131116 68.85600 10003.089 ## 2 Sovereign country 17018507.4 143819666 70.74366 25284.586 ## 3 Sovereign country 3142892.1 1293859294 68.02100 5385.142 ## 4 Sovereign country 133782.1 159405279 71.80300 2973.042 ## 5 Sovereign country 874120.0 185546257 66.13900 4576.227 ## 6 Country 9409830.5 1364270000 75.93200 12758.648 # 查看查看符合條件的總資料筆數（亦即國家數） nrow(world_fil3) ## [1] 8 除可以直接以「逗號」分隔各項條件外，亦可利用「&amp;」串接所有條件，程式碼撰寫如下。 # 利用&amp;串接所有條件 world_fil4=filter(world, continent %in% c(&quot;Asia&quot;, &quot;Europe&quot;) &amp; pop&gt;100000000) 使用data.table套件篩選資料，程式碼撰寫如下。 world_DT[continent %in% c(&quot;Asia&quot;, &quot;Europe&quot;) &amp; pop&gt;100000000] ⌾ 多重條件（OR） filter()函式係需要所有條件皆滿足尚會回傳資料，然而有時我們希望其一條件成立即可，此時可以將各項條件以「|」分開，程式碼撰寫如下。 # 滿足其一條建篩選資料 world_fil5=filter(world, continent %in% c(&quot;Asia&quot;, &quot;Europe&quot;) | pop&gt;100000000) # 查看查看符合條件的總資料筆數（亦即國家數） nrow(world_fil5) ## [1] 90 使用data.table套件篩選資料，程式碼撰寫如下。 world_DT[continent %in% c(&quot;Asia&quot;, &quot;Europe&quot;) | pop&gt;100000000] 2.5 新增資料屬性 前面所提及的cbind()與bind_cols()函式可以將欄位予以合併，藉此擴充資料屬性。此外，於第一章節中所提及的向量「$」亦可新增資料屬性。除以上寫法外，可利用dplyr套件中的mutate()函式擴增資料屬性，且操作更具有彈性。函式撰寫如下。 mutate(資料, 新變數1=..., 新變數2=..., ...) ⌾ 新增資料屬性 以world資料為例，新增「各國人口密度(pop_dens)」之欄位（人口密度即總人口數除以面積），並新增一欄位串接 continent 和 subregion（使用paste0()函式串接向量）。程式碼撰寫如下。 # 新增人口密度屬性 world_mut=mutate(world, pop_dens=pop/area_km2, district=paste0(continent, &quot; (&quot;, subregion, &quot;)&quot;)) # 查看前六筆資料 head(world_mut[, c(&quot;name_long&quot;, &quot;area_km2&quot;, &quot;pop&quot;, &quot;pop_dens&quot;)]) ## name_long area_km2 pop pop_dens ## 1 Fiji 19289.97 885806 45.920547 ## 2 Tanzania 932745.79 52234869 56.001184 ## 3 Western Sahara 96270.60 NA NA ## 4 Canada 10036042.98 35535348 3.540773 ## 5 United States 9510743.74 318622525 33.501326 ## 6 Kazakhstan 2729810.51 17288285 6.333145 使用data.table套件新增資料屬性，程式碼撰寫如下。 # 新增一個變數時 world_mut=world_DT[, pop_dens := pop/area_km2] # 新增多個變數時 world_mut=world_DT[, c(&quot;pop_dens&quot;, &quot;district&quot;) := .(pop/area_km2, paste0(continent, &quot; (&quot;, subregion, &quot;)&quot;))] 由以上程式碼可知，透過data.table套件新增欄位時，須利用「:=」定義運算方式，並將新增的欄位名稱置於其左側，而運算過程則放置於右側。 其他寫法如下（請回顧擴增資料欄（新增屬性）小節）： # 利用$直接新增欄位 world$pop_dens=world$pop/world$area_km2 world$district=paste0(world$continent, &quot; (&quot;, world$subregion, &quot;)&quot;) 2.6 條件判斷 ⌾ 使用ifelse()函式判斷 於前一章中有提及「邏輯判斷」的流程控制方法，其中ifelse()函式可大幅縮減程式碼。在此亦可透過mutate()函式搭配ifelse()函式建立邏輯判斷的結果。以world資料為例，新增一欄位判斷國家面積的大小，若國家面積大於整體資料中位數，標記為「L」；否則記錄為「S」。程式碼撰寫如下。 # 先計算面積中位數 area_med=median(world$area_km2) # 利用ifelse函式判斷類群 world_ifel=mutate(world, TYPE=ifelse(area_km2&gt;=area_med, &quot;L&quot;, &quot;S&quot;)) # 查看六筆資料 head(world_ifel[, c(&quot;name_long&quot;, &quot;area_km2&quot;, &quot;TYPE&quot;)]) ## name_long area_km2 TYPE ## 1 Fiji 19289.97 S ## 2 Tanzania 932745.79 L ## 3 Western Sahara 96270.60 S ## 4 Canada 10036042.98 L ## 5 United States 9510743.74 L ## 6 Kazakhstan 2729810.51 L ⌾ 使用case_when()函式判斷 ifelse()函式較適合應用於單純的邏輯判斷，若涉及多項判斷式可能須建立巢狀迴圈，使程式碼變得甚為複雜。此時我們可應用dplyr套件中的case_when()函式，並同樣搭配mutate()函式以新增欄位。case_when()函式撰寫架構如下： case_when(欄位, 條件1 ~ 結果1, 條件2 ~ 結果2, TRUE ~ 結果3, ...) 其中的「TRUE」意謂著若前面所有條件皆「不成立」時，則回傳TRUE賦予的結果。 再次以world資料為例，若欲將所有國家依據面積及人口數予以分類，並藉由中位數劃分數值高低，最後分為「面積大人口多（LALP）」、「面積大人口少（LASP）」、「面積小人口多（SALP）」與「面積小人口少（SASP）」四者。程式碼撰寫如下。 # 先計算面積與人口數中位數 area_med=median(world$area_km2) pop_med=median(world$pop, na.rm=T) # 由於人口數中含有NA值，故設定na.rm=T以移除NA值後再計算 # 使用case_when()函式新增分類 world_casewhen=mutate(world, TYPE=case_when( area_km2&gt;=area_med &amp; pop&gt;=pop_med ~ &quot;LALP&quot;, area_km2&gt;=area_med &amp; pop&lt;pop_med ~ &quot;LASP&quot;, area_km2&lt;area_med &amp; pop&gt;=pop_med ~ &quot;SALP&quot;, TRUE ~ &quot;SASP&quot; )) # 查看六筆資料 head(world_casewhen[, c(&quot;name_long&quot;, &quot;area_km2&quot;, &quot;pop&quot;, &quot;TYPE&quot;)]) ## name_long area_km2 pop TYPE ## 1 Fiji 19289.97 885806 SASP ## 2 Tanzania 932745.79 52234869 LALP ## 3 Western Sahara 96270.60 NA SASP ## 4 Canada 10036042.98 35535348 LALP ## 5 United States 9510743.74 318622525 LALP ## 6 Kazakhstan 2729810.51 17288285 LALP 2.7 資料排序 ⌾ 資料排序（正序） 在第一章節中我們提及許多排序的方法，包含向量排序（sort()、order()、rank()）與文字排序（str_sort()、str_order()）。而在此我們可以進一步藉由dplyr套件中的arrange()函式排序資料，其函式撰寫架構如下。 arrange(資料, 待排序欄位) 以world資料為例，若欲將所有國家依人口數由少至多排列，程式碼撰寫如下。 world_arr1=arrange(world, pop) # 查看前六筆資料 head(world_arr1[, c(&quot;name_long&quot;, &quot;continent&quot;, &quot;pop&quot;)]) ## name_long continent pop ## 1 Greenland North America 56295 ## 2 Vanuatu Oceania 258850 ## 3 New Caledonia Oceania 268050 ## 4 Iceland Europe 327386 ## 5 Belize North America 351694 ## 6 Bahamas North America 382169 使用data.table套件排序，函式撰寫架構如下。 資料[order(待排序欄位)] 以world資料，依人口數由少至多排列為例，程式碼撰寫如下 world_DT[order(pop)] ⌾ 資料排序（倒序） 須注意的是arrange()函式預設為由小到大（正序）排列，故若欲「倒序」排列，可在待排序欄位引數前面加上「-」即可，抑或使用desc(待排序欄位)函式。以world資料依人口數由多至少排列為例，程式碼撰寫如下。 world_arr2=arrange(world, -pop) # 或使用desc()函式倒序排列 world_arr2=arrange(world, desc(pop)) # 查看前六筆資料 head(world_arr2[, c(&quot;name_long&quot;, &quot;continent&quot;, &quot;pop&quot;)]) ## name_long continent pop ## 1 China Asia 1364270000 ## 2 India Asia 1293859294 ## 3 United States North America 318622525 ## 4 Indonesia Asia 255131116 ## 5 Brazil South America 204213133 ## 6 Pakistan Asia 185546257 使用data.table套件倒序排列資料，程式碼撰寫如下。 world_DT[order(-pop)] 2.8 資料分群與統計 ⌾ 將資料依據特定欄位分群 group_by(資料, 分群欄位) 利用group_by()函式分群後，資料並不會有任何變化，必須再搭配其他函式才能發揮分群的效果。 ⌾ 分群篩選資料（filter()） 透過分群篩選資料，可篩選各群組符合條件者，函式撰寫架構如下。 group_by(資料, 分群欄位)%&gt;% filter(條件) 以world資料為例，先將資料依據洲（continent）分群，而後篩選出各洲資料中面積最大者，程式碼撰寫如下。 world_gro1=group_by(world, continent)%&gt;% filter(area_km2==max(area_km2)) # 查看資料 world_gro1[, c(&quot;continent&quot;,&quot;name_long&quot;,&quot;area_km2&quot;)] ## # A tibble: 8 × 3 ## # Groups: continent [8] ## continent name_long area_km2 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 North America Canada 10036043. ## 2 Africa Democratic Republic of the Congo 2323492. ## 3 Europe Russian Federation 17018507. ## 4 Seven seas (open ocean) French Southern and Antarctic Lands 11603. ## 5 South America Brazil 8508557. ## 6 Oceania Australia 7687614. ## 7 Asia China 9409830. ## 8 Antarctica Antarctica 12335956. ⌾ 分群篩選資料（slice()） slice()函式用以回傳指定條件的索引值，故搭配group_by()時可以篩選各分群中的指定橫列位。函式撰寫架構如下。 group_by(資料, 分群欄位)%&gt;% slice(索引值) 舉例而言，若欲回傳world資料中各分群內的第一筆資料，程式碼撰寫如下。 world_gro2=group_by(world, continent)%&gt;% slice(1) # 查看資料 world_gro2[, c(&quot;continent&quot;,&quot;name_long&quot;,&quot;area_km2&quot;,&quot;pop&quot;,&quot;lifeExp&quot;,&quot;gdpPercap&quot;)] ## # A tibble: 8 × 6 ## # Groups: continent [8] ## continent name_long area_km2 pop lifeExp gdpPercap ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Africa Tanzania 9.33e5 5.22e7 64.2 2402. ## 2 Antarctica Antarctica 1.23e7 NA NA NA ## 3 Asia Kazakhstan 2.73e6 1.73e7 71.6 23587. ## 4 Europe Russian Federation 1.70e7 1.44e8 70.7 25285. ## 5 North America Canada 1.00e7 3.55e7 82.0 43079. ## 6 Oceania Fiji 1.93e4 8.86e5 70.0 8222. ## 7 Seven seas (open ocean) French Southern an… 1.16e4 NA NA NA ## 8 South America Argentina 2.78e6 4.30e7 76.3 18798. 使用data.table套件分群統計，程式碼撰寫如下。 函式架構： 資料[, .SD[索引值], by=分群欄位] 回傳world資料中各分群內的第一筆資料。 world_DT[, .SD[1], by=continent] 此外，亦可擷取多個索引值的資料，舉例而言，若欲回傳world資料中各分群內的第一筆與最後一筆資料，程式碼撰寫如下。 world_gro3=group_by(world, continent)%&gt;% slice(1, n()) # 查看資料 world_gro3[, c(&quot;continent&quot;,&quot;name_long&quot;)] ## # A tibble: 16 × 2 ## # Groups: continent [8] ## continent name_long ## &lt;chr&gt; &lt;chr&gt; ## 1 Africa Tanzania ## 2 Africa South Sudan ## 3 Antarctica Antarctica ## 4 Antarctica Antarctica ## 5 Asia Kazakhstan ## 6 Asia Cyprus ## 7 Europe Russian Federation ## 8 Europe Kosovo ## 9 North America Canada ## 10 North America Trinidad and Tobago ## 11 Oceania Fiji ## 12 Oceania Australia ## 13 Seven seas (open ocean) French Southern and Antarctic Lands ## 14 Seven seas (open ocean) French Southern and Antarctic Lands ## 15 South America Argentina ## 16 South America Paraguay 使用data.table套件分群統計，程式碼撰寫如下。 回傳world資料中各分群（洲）內的第一筆與最後一筆資料。 world_DT[, .SD[c(1, .N)], by=continent] 上述程式碼中的.N意同dplyr套件中的n()。 group_by() %&gt;% slice()函式亦可與arrange()函式結合，以擷取排序後特定序位的資料。再以world資料為例，若欲擷取每個洲前三大面積的國家，可以先利用arrange()函式將所有資料依據面積（area_km2）排列，而後再透過group_by() %&gt;% slice()函式擷取需要的索引值（即1:3）。程式碼撰寫如下。 world_gro4=arrange(world, desc(area_km2))%&gt;% group_by(continent)%&gt;% slice(1:3) # 查看資料 world_gro4[, c(&quot;continent&quot;,&quot;name_long&quot;,&quot;area_km2&quot;,&quot;pop&quot;,&quot;lifeExp&quot;,&quot;gdpPercap&quot;)] ## # A tibble: 20 × 6 ## # Groups: continent [8] ## continent name_long area_km2 pop lifeExp gdpPercap ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Africa Democratic Republ… 2.32e6 7.37e7 58.8 785. ## 2 Africa Algeria 2.32e6 3.91e7 75.6 13483. ## 3 Africa Sudan 1.85e6 3.77e7 64.0 4188. ## 4 Antarctica Antarctica 1.23e7 NA NA NA ## 5 Asia China 9.41e6 1.36e9 75.9 12759. ## 6 Asia India 3.14e6 1.29e9 68.0 5385. ## 7 Asia Kazakhstan 2.73e6 1.73e7 71.6 23587. ## 8 Europe Russian Federation 1.70e7 1.44e8 70.7 25285. ## 9 Europe France 6.45e5 NA NA NA ## 10 Europe Ukraine 5.73e5 4.53e7 71.2 8243. ## 11 North America Canada 1.00e7 3.55e7 82.0 43079. ## 12 North America United States 9.51e6 3.19e8 78.8 51922. ## 13 North America Greenland 2.21e6 5.63e4 NA NA ## 14 Oceania Australia 7.69e6 2.35e7 82.3 43547. ## 15 Oceania Papua New Guinea 4.65e5 7.76e6 65.2 3709. ## 16 Oceania New Zealand 2.78e5 4.51e6 81.4 34455. ## 17 Seven seas (open ocean) French Southern a… 1.16e4 NA NA NA ## 18 South America Brazil 8.51e6 2.04e8 75.0 15374. ## 19 South America Argentina 2.78e6 4.30e7 76.3 18798. ## 20 South America Peru 1.31e6 3.10e7 74.5 11548. 使用data.table套件分群統計，程式碼撰寫如下。 回傳world資料中各分群（洲）面積前三大的資料。 world_DT[order(-area_km2)]%&gt;% .[, .SD[c(1:3)], by=continent] 與dplyr套件的撰寫方式相同，若欲串接不同的函式，可透過 pipe (%&gt;%) 連接。另外請注意此回傳結果會保留所有匹配與未匹配的資料，例如world_DT資料中 Antarctica 僅有一個區域，而由於我們尋找前六筆資料，此函式會回傳所有六筆結果，未匹配者則在其他筆資料中顯示NA。 group_by() %&gt;% filter()函式無法透過多個條件設定，回傳符合各個不同條件的資料。然而實務上有時候希望擷取滿足多個不同條件的資料，此時可以利用group() %&gt;% slice()達成目的。 以world資料為例，先將資料依據洲（continent）分群，而後篩選出各洲資料中面積最大與最小者，程式碼撰寫如下。 world_gro5=group_by(world, continent)%&gt;% slice(which.max(area_km2), which.min(area_km2)) # 查看所有資料 world_gro5[, c(&quot;continent&quot;,&quot;name_long&quot;,&quot;area_km2&quot;)] ## # A tibble: 16 × 3 ## # Groups: continent [8] ## continent name_long area_km2 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Africa Democratic Republic of the Congo 2323492. ## 2 Africa The Gambia 14031. ## 3 Antarctica Antarctica 12335956. ## 4 Antarctica Antarctica 12335956. ## 5 Asia China 9409830. ## 6 Asia Northern Cyprus 3786. ## 7 Europe Russian Federation 17018507. ## 8 Europe Luxembourg 2417. ## 9 North America Canada 10036043. ## 10 North America Trinidad and Tobago 7738. ## 11 Oceania Australia 7687614. ## 12 Oceania Vanuatu 7490. ## 13 Seven seas (open ocean) French Southern and Antarctic Lands 11603. ## 14 Seven seas (open ocean) French Southern and Antarctic Lands 11603. ## 15 South America Brazil 8508557. ## 16 South America Falkland Islands 16364. 以上程式碼中which.max()函式用以尋找最大值的索引；which.min()則尋找最小值之索引。此時利用group_by() %&gt;% slice()函式可同時回傳符合不同特定條件者。綜上所述，group_by() %&gt;% slice()函式的使用上相當具彈性。 使用data.table套件分群統計，程式碼撰寫如下。 回傳world資料中各分群（洲）面積最大與最小的資料。 world_DT[, .SD[c(which.min(area_km2), which.max(area_km2))], by=continent] ⌾ 分群統計資料（summarise()） 分群統計資料可針對各群組內的欄位做運算，如最大值、最小值、加總、平均…等，抑或使用自定義函式。分群統計資料的函式撰寫架構如下。 group_by(資料, 分群欄位)%&gt;% summarise(運算函式) 以world資料為例，先將資料依據洲（continent）分群，而後統計各洲總人口數與國家數，程式碼撰寫如下。 world_gro6=group_by(world, continent)%&gt;% summarise(pop=sum(pop, na.rm=T), County_N=n()) # 輸出資料 world_gro6 ## # A tibble: 8 × 3 ## continent pop County_N ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; ## 1 Africa 1154946633 51 ## 2 Antarctica 0 1 ## 3 Asia 4311408059 47 ## 4 Europe 669036256 39 ## 5 North America 565028684 18 ## 6 Oceania 37757833 7 ## 7 Seven seas (open ocean) 0 1 ## 8 South America 412060811 13 請注意於本範例中由於總人口數（pop）欄位中含有部分 NA，故為避免計算結果有誤，須在sum()函式中設定na.rm=T引數。此外，由輸出結果可發現，有別於group_by() %&gt;% filter()函式會回傳所有的資料欄位，group_by() %&gt;% summarise()函式僅回傳指定的統計資料欄位。另外n()函式表示計算各分群內的總資料筆數。 使用data.table套件分群統計，程式碼撰寫如下。 函式架構： 資料[, .(運算函式), by=分群欄位] 回傳world資料中各分群（洲）總人口數與國家個數。 world_DT[, .(pop=sum(pop, na.rm=T), County_N=.N), by=continent] ⌾ 分群統計資料（reframe()） 除了group_by() %&gt;% summarise()以外，亦可使用group_by() %&gt;% reframe()達到相同目的，且適用的彈性更大。如以上的範例，group_by() %&gt;% summarise()回傳的是統計後的結果，通常運算函式僅回傳一個值，如sum()是針對所有群組內的特定變數做加總。然而有時候運算函式可能並非單純回傳一個值，例如range()函式回傳的是兩個值，包括最小值與最大值，此時使用group_by() %&gt;% summarise()雖能得到結果，但會出現警告訊息，而使用group_by() %&gt;% reframe()則可在無警告之下得到正確結果。group_by() %&gt;% reframe()的函式撰寫架構如下，與group_by() %&gt;% summarise()相同。 group_by(資料, 分群欄位)%&gt;% reframe(運算函式) 再次以world資料為例，將資料依據洲（continent）分群，而後統計各洲人均 GDP（gdpPercap）的範圍，程式碼撰寫如下。 world_gro7=group_by(world, continent)%&gt;% reframe(gdpPercap=range(gdpPercap, na.rm=T)) # 輸出資料 world_gro7 ## # A tibble: 16 × 2 ## continent gdpPercap ## &lt;chr&gt; &lt;dbl&gt; ## 1 Africa 597. ## 2 Africa 31543. ## 3 Antarctica Inf ## 4 Antarctica -Inf ## 5 Asia 1839. ## 6 Asia 120860. ## 7 Europe 4763. ## 8 Europe 93655. ## 9 North America 1653. ## 10 North America 51922. ## 11 Oceania 2140. ## 12 Oceania 43547. ## 13 Seven seas (open ocean) Inf ## 14 Seven seas (open ocean) -Inf ## 15 South America 6325. ## 16 South America 22195. 由以上程式碼可知各洲人均 GDP 的範圍。另須注意的是，由於「Antarctica」中所有國家並無人均 GDP 的資料，故回傳之上下界為 Inf 與 -Inf。 使用data.table套件分群統計，程式碼撰寫如下。 回傳world資料中各分群（洲）總人口數與國家個數。 world_DT[, .(pop=sum(pop, na.rm=T), County_N=.N), by=continent] 2.9 連接資料 cbind與bind_cols()函式是將兩份相同橫列數的資料直接予以合併，以連結兩份資料。不過在資料分析時，我們往往會有許多來源與目的不同的資料，而若希望將其合併，則必須依據「參照欄位」貼附。具體而論，world資料中記錄世界各國的詳細資訊，而coffee資料中則記錄世界各國的咖啡產量，若我們想同時知道各國的面積與咖啡產量，勢必需要將這兩份資料合併在一起，而合併的原則須依據「國家名稱」以貼附資料。 在dplyr套件中可以利用join相關函式，包括left_join()、full_join()與inner_join()。 left_join()是只保留第一份（左側）所有資料，並依據參照欄位貼附第二份（右側）資料；full_join()是指所有兩份資料皆須保留，並進一步依據參照欄位相互貼附；inner_join()則是指保留兩份資料共同擁有的參照欄位，並依此相互貼附。 在base套件中與在data.table套件中，無論是何種形式的連接資料方式，皆可分別利用merge()與merge.data.table()函式達成目的，其中可透過設定引數（all=與all.x=）之方式決定連接資料的方式。 關於連接資料的概念詳見圖2.1之示意圖，而以上三套件連接資料的函式彙整如表2.2。 圖 2.1: join 示意圖 表 2.2: 連接資料函式彙整 資料連接方式 dplyr套件 base套件 data.table套件 以第一份（左側）資料為基準 left_join(資料1, 資料2) merge(資料1, 資料2, all.x=T) merge.data.table(資料1, 資料2, all.x=T) 保留資料1與資料2所有資料 full_join(資料1, 資料2) merge(資料1, 資料2) merge.data.table(資料1, 資料2) 保留共同擁有的參照欄位之資料 inner_join(資料1, 資料2) merge(資料1, 資料2, all=T) merge.data.table(資料1, 資料2, all=T) ⌾ 以第一份（左側）資料為基準 1eft_join()的函式撰寫架構如下。 1eft_join(資料1, 資料2, by=&quot;參照欄位&quot;) 函式中的by=引數用以設定「參照欄位」，亦即若兩份資料的參照欄位內容是相同者，便將資料2的欄位貼附於資料1後。1eft_join()函式是保留資料1的所有資料，故若參照欄位的內容於資料2找不到相對應者，則該列貼附的結果會直接回傳「NA」。 另外需注意的是，by=引數可以不用設定，而此時該函式預設在兩份資料中尋找所有相同欄位名稱者作為參照欄位。而若兩份資料內欲參照的欄位名稱不相同時，引數設定須為by=c(資料1參照欄位=資料2參照欄位)。若有多個參照欄位，各欄位的名稱須以向量表達，如by=c(\"參照欄位1\", \"參照欄位2\")。 以學生資料（StuInfo）與學生分數紀錄（StuScore）作為範例，程式碼撰寫如下。 # 建立學生資料與分數資料 StuInfo=data.frame(StudentID=c(&quot;ID1&quot;,&quot;ID2&quot;,&quot;ID3&quot;,&quot;ID4&quot;,&quot;ID5&quot;,&quot;ID6&quot;), Class=c(&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;C&quot;,&quot;D&quot;,&quot;A&quot;), Name=c(&quot;Bob&quot;,&quot;Mary&quot;,&quot;Robert&quot;,&quot;Jason&quot;,&quot;Jane&quot;,&quot;Jessie&quot;)) StuScore=data.frame(StudentID=c(&quot;ID1&quot;,&quot;ID2&quot;,&quot;ID4&quot;,&quot;ID5&quot;,&quot;ID6&quot;,&quot;ID7&quot;), Score=c(60,80,40,50,100,90)) # 連接兩份資料 left_join(StuInfo, StuScore, by=&quot;StudentID&quot;) ## StudentID Class Name Score ## 1 ID1 A Bob 60 ## 2 ID2 B Mary 80 ## 3 ID3 A Robert NA ## 4 ID4 C Jason 40 ## 5 ID5 D Jane 50 ## 6 ID6 A Jessie 100 以上程式碼中by=\"StudentID\"即為兩份資料的共同參照欄位，由於兩參照欄位正好名稱相同，故若未設定此一引數亦可。另外從回傳結果可發現，由於資料 1（StuInfo）中並無學生代碼「ID7」，故該欄位的資料 2（StuScore）屬性皆為NA。 使用base與data.table套件連接資料，程式碼撰寫如下。 在此二套件中，若連接方式為「以第一份（左側）資料為基準」，必須設定引數all.x=T。函式中的by=引數用以設定「參照欄位」，而若兩資料的參照欄位名稱不同時，需進一步設定by.x=與by.y=兩引數，分別為左側資料的參照欄位名稱與右側資料的欄位名稱。函式撰寫架構如下： # 若兩資料的參照欄位名稱不同 merge(資料1, 資料2, all.x=T, by=&quot;參照欄位&quot;) merge.data.table(資料1, 資料2, all.x=T, by=&quot;參照欄位&quot;) # 若兩資料的參照欄位名稱不同 merge(資料1, 資料2, all.x=T, by.x=&quot;資料1參照欄位&quot;, by.y=&quot;資料2參照欄位&quot;) merge.data.table(資料1, 資料2, all.x=T, by.x=&quot;資料1參照欄位&quot;, by.y=&quot;資料2參照欄位&quot;) 以連接StuInfo與StuScore兩資料為例，參照欄位為「StudentID」。 StuInfo_DT=data.table(StudentID=c(&quot;ID1&quot;,&quot;ID2&quot;,&quot;ID3&quot;,&quot;ID4&quot;,&quot;ID5&quot;,&quot;ID6&quot;), Class=c(&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;C&quot;,&quot;D&quot;,&quot;A&quot;), Name=c(&quot;Bob&quot;,&quot;Mary&quot;,&quot;Robert&quot;,&quot;Jason&quot;,&quot;Jane&quot;,&quot;Jessie&quot;)) StuScore_DT=data.table(StudentID=c(&quot;ID1&quot;,&quot;ID2&quot;,&quot;ID4&quot;,&quot;ID5&quot;,&quot;ID6&quot;,&quot;ID7&quot;), Score=c(60,80,40,50,100,90)) # base套件 merge(StuInfo, StuScore, all.x=T, by=&quot;StudentID&quot;) # data.table套件 merge.data.table(StuInfo_DT, StuScore_DT, all.x=T, by=&quot;StudentID&quot;) 利用前述world與coffee兩資料依據國家名稱相連接為例，在world資料中貼附各國咖啡的產量。程式碼撰寫如下。 left_join(world, coffee, by=&quot;name_long&quot;) ## iso_a2 name_long continent ## 1 FJ Fiji Oceania ## 2 TZ Tanzania Africa ## 3 EH Western Sahara Africa ## 4 CA Canada North America ## 5 US United States North America ## 6 KZ Kazakhstan Asia ## 7 UZ Uzbekistan Asia ## 8 PG Papua New Guinea Oceania ## 9 ID Indonesia Asia ## 10 AR Argentina South America ## 11 CL Chile South America ## 12 CD Democratic Republic of the Congo Africa ## 13 SO Somalia Africa ## 14 KE Kenya Africa ## 15 SD Sudan Africa ## 16 TD Chad Africa ## 17 HT Haiti North America ## 18 DO Dominican Republic North America ## 19 RU Russian Federation Europe ## 20 BS Bahamas North America ## 21 FK Falkland Islands South America ## 22 NO Norway Europe ## 23 GL Greenland North America ## 24 TF French Southern and Antarctic Lands Seven seas (open ocean) ## 25 TL Timor-Leste Asia ## 26 ZA South Africa Africa ## 27 LS Lesotho Africa ## 28 MX Mexico North America ## 29 UY Uruguay South America ## 30 BR Brazil South America ## 31 BO Bolivia South America ## 32 PE Peru South America ## 33 CO Colombia South America ## 34 PA Panama North America ## 35 CR Costa Rica North America ## 36 NI Nicaragua North America ## 37 HN Honduras North America ## 38 SV El Salvador North America ## 39 GT Guatemala North America ## 40 BZ Belize North America ## 41 VE Venezuela South America ## 42 GY Guyana South America ## 43 SR Suriname South America ## 44 FR France Europe ## 45 EC Ecuador South America ## 46 PR Puerto Rico North America ## 47 JM Jamaica North America ## 48 CU Cuba North America ## 49 ZW Zimbabwe Africa ## 50 BW Botswana Africa ## 51 &lt;NA&gt; Namibia Africa ## 52 SN Senegal Africa ## 53 ML Mali Africa ## 54 MR Mauritania Africa ## 55 BJ Benin Africa ## 56 NE Niger Africa ## 57 NG Nigeria Africa ## 58 CM Cameroon Africa ## 59 TG Togo Africa ## 60 GH Ghana Africa ## 61 CI Cote d&#39;Ivoire Africa ## 62 GN Guinea Africa ## 63 GW Guinea-Bissau Africa ## 64 LR Liberia Africa ## 65 SL Sierra Leone Africa ## 66 BF Burkina Faso Africa ## 67 CF Central African Republic Africa ## 68 CG Republic of the Congo Africa ## 69 GA Gabon Africa ## 70 GQ Equatorial Guinea Africa ## 71 ZM Zambia Africa ## 72 MW Malawi Africa ## 73 MZ Mozambique Africa ## 74 SZ eSwatini Africa ## 75 AO Angola Africa ## 76 BI Burundi Africa ## 77 IL Israel Asia ## 78 LB Lebanon Asia ## 79 MG Madagascar Africa ## 80 PS Palestine Asia ## 81 GM The Gambia Africa ## 82 TN Tunisia Africa ## 83 DZ Algeria Africa ## 84 JO Jordan Asia ## 85 AE United Arab Emirates Asia ## 86 QA Qatar Asia ## 87 KW Kuwait Asia ## 88 IQ Iraq Asia ## 89 OM Oman Asia ## 90 VU Vanuatu Oceania ## 91 KH Cambodia Asia ## 92 TH Thailand Asia ## 93 LA Lao PDR Asia ## 94 MM Myanmar Asia ## 95 VN Vietnam Asia ## 96 KP Dem. Rep. Korea Asia ## 97 KR Republic of Korea Asia ## 98 MN Mongolia Asia ## 99 IN India Asia ## 100 BD Bangladesh Asia ## 101 BT Bhutan Asia ## 102 NP Nepal Asia ## 103 PK Pakistan Asia ## 104 AF Afghanistan Asia ## 105 TJ Tajikistan Asia ## 106 KG Kyrgyzstan Asia ## 107 TM Turkmenistan Asia ## 108 IR Iran Asia ## 109 SY Syria Asia ## 110 AM Armenia Asia ## 111 SE Sweden Europe ## 112 BY Belarus Europe ## 113 UA Ukraine Europe ## 114 PL Poland Europe ## 115 AT Austria Europe ## 116 HU Hungary Europe ## 117 MD Moldova Europe ## 118 RO Romania Europe ## 119 LT Lithuania Europe ## 120 LV Latvia Europe ## 121 EE Estonia Europe ## 122 DE Germany Europe ## 123 BG Bulgaria Europe ## 124 GR Greece Europe ## 125 TR Turkey Asia ## 126 AL Albania Europe ## 127 HR Croatia Europe ## 128 CH Switzerland Europe ## 129 LU Luxembourg Europe ## 130 BE Belgium Europe ## 131 NL Netherlands Europe ## 132 PT Portugal Europe ## 133 ES Spain Europe ## 134 IE Ireland Europe ## 135 NC New Caledonia Oceania ## 136 SB Solomon Islands Oceania ## 137 NZ New Zealand Oceania ## 138 AU Australia Oceania ## 139 LK Sri Lanka Asia ## 140 CN China Asia ## 141 TW Taiwan Asia ## 142 IT Italy Europe ## 143 DK Denmark Europe ## 144 GB United Kingdom Europe ## 145 IS Iceland Europe ## 146 AZ Azerbaijan Asia ## 147 GE Georgia Asia ## 148 PH Philippines Asia ## 149 MY Malaysia Asia ## 150 BN Brunei Darussalam Asia ## 151 SI Slovenia Europe ## 152 FI Finland Europe ## 153 SK Slovakia Europe ## 154 CZ Czech Republic Europe ## 155 ER Eritrea Africa ## 156 JP Japan Asia ## 157 PY Paraguay South America ## 158 YE Yemen Asia ## 159 SA Saudi Arabia Asia ## 160 AQ Antarctica Antarctica ## 161 &lt;NA&gt; Northern Cyprus Asia ## 162 CY Cyprus Asia ## 163 MA Morocco Africa ## 164 EG Egypt Africa ## 165 LY Libya Africa ## 166 ET Ethiopia Africa ## 167 DJ Djibouti Africa ## 168 &lt;NA&gt; Somaliland Africa ## 169 UG Uganda Africa ## 170 RW Rwanda Africa ## 171 BA Bosnia and Herzegovina Europe ## 172 MK Macedonia Europe ## 173 RS Serbia Europe ## 174 ME Montenegro Europe ## 175 XK Kosovo Europe ## 176 TT Trinidad and Tobago North America ## 177 SS South Sudan Africa ## region_un subregion type ## 1 Oceania Melanesia Sovereign country ## 2 Africa Eastern Africa Sovereign country ## 3 Africa Northern Africa Indeterminate ## 4 Americas Northern America Sovereign country ## 5 Americas Northern America Country ## 6 Asia Central Asia Sovereign country ## 7 Asia Central Asia Sovereign country ## 8 Oceania Melanesia Sovereign country ## 9 Asia South-Eastern Asia Sovereign country ## 10 Americas South America Sovereign country ## 11 Americas South America Sovereign country ## 12 Africa Middle Africa Sovereign country ## 13 Africa Eastern Africa Sovereign country ## 14 Africa Eastern Africa Sovereign country ## 15 Africa Northern Africa Sovereign country ## 16 Africa Middle Africa Sovereign country ## 17 Americas Caribbean Sovereign country ## 18 Americas Caribbean Sovereign country ## 19 Europe Eastern Europe Sovereign country ## 20 Americas Caribbean Sovereign country ## 21 Americas South America Dependency ## 22 Europe Northern Europe Sovereign country ## 23 Americas Northern America Country ## 24 Seven seas (open ocean) Seven seas (open ocean) Dependency ## 25 Asia South-Eastern Asia Sovereign country ## 26 Africa Southern Africa Sovereign country ## 27 Africa Southern Africa Sovereign country ## 28 Americas Central America Sovereign country ## 29 Americas South America Sovereign country ## 30 Americas South America Sovereign country ## 31 Americas South America Sovereign country ## 32 Americas South America Sovereign country ## 33 Americas South America Sovereign country ## 34 Americas Central America Sovereign country ## 35 Americas Central America Sovereign country ## 36 Americas Central America Sovereign country ## 37 Americas Central America Sovereign country ## 38 Americas Central America Sovereign country ## 39 Americas Central America Sovereign country ## 40 Americas Central America Sovereign country ## 41 Americas South America Sovereign country ## 42 Americas South America Sovereign country ## 43 Americas South America Sovereign country ## 44 Europe Western Europe Country ## 45 Americas South America Sovereign country ## 46 Americas Caribbean Dependency ## 47 Americas Caribbean Sovereign country ## 48 Americas Caribbean Sovereign country ## 49 Africa Eastern Africa Sovereign country ## 50 Africa Southern Africa Sovereign country ## 51 Africa Southern Africa Sovereign country ## 52 Africa Western Africa Sovereign country ## 53 Africa Western Africa Sovereign country ## 54 Africa Western Africa Sovereign country ## 55 Africa Western Africa Sovereign country ## 56 Africa Western Africa Sovereign country ## 57 Africa Western Africa Sovereign country ## 58 Africa Middle Africa Sovereign country ## 59 Africa Western Africa Sovereign country ## 60 Africa Western Africa Sovereign country ## 61 Africa Western Africa Sovereign country ## 62 Africa Western Africa Sovereign country ## 63 Africa Western Africa Sovereign country ## 64 Africa Western Africa Sovereign country ## 65 Africa Western Africa Sovereign country ## 66 Africa Western Africa Sovereign country ## 67 Africa Middle Africa Sovereign country ## 68 Africa Middle Africa Sovereign country ## 69 Africa Middle Africa Sovereign country ## 70 Africa Middle Africa Sovereign country ## 71 Africa Eastern Africa Sovereign country ## 72 Africa Eastern Africa Sovereign country ## 73 Africa Eastern Africa Sovereign country ## 74 Africa Southern Africa Sovereign country ## 75 Africa Middle Africa Sovereign country ## 76 Africa Eastern Africa Sovereign country ## 77 Asia Western Asia Country ## 78 Asia Western Asia Sovereign country ## 79 Africa Eastern Africa Sovereign country ## 80 Asia Western Asia Disputed ## 81 Africa Western Africa Sovereign country ## 82 Africa Northern Africa Sovereign country ## 83 Africa Northern Africa Sovereign country ## 84 Asia Western Asia Sovereign country ## 85 Asia Western Asia Sovereign country ## 86 Asia Western Asia Sovereign country ## 87 Asia Western Asia Sovereign country ## 88 Asia Western Asia Sovereign country ## 89 Asia Western Asia Sovereign country ## 90 Oceania Melanesia Sovereign country ## 91 Asia South-Eastern Asia Sovereign country ## 92 Asia South-Eastern Asia Sovereign country ## 93 Asia South-Eastern Asia Sovereign country ## 94 Asia South-Eastern Asia Sovereign country ## 95 Asia South-Eastern Asia Sovereign country ## 96 Asia Eastern Asia Sovereign country ## 97 Asia Eastern Asia Sovereign country ## 98 Asia Eastern Asia Sovereign country ## 99 Asia Southern Asia Sovereign country ## 100 Asia Southern Asia Sovereign country ## 101 Asia Southern Asia Sovereign country ## 102 Asia Southern Asia Sovereign country ## 103 Asia Southern Asia Sovereign country ## 104 Asia Southern Asia Sovereign country ## 105 Asia Central Asia Sovereign country ## 106 Asia Central Asia Sovereign country ## 107 Asia Central Asia Sovereign country ## 108 Asia Southern Asia Sovereign country ## 109 Asia Western Asia Sovereign country ## 110 Asia Western Asia Sovereign country ## 111 Europe Northern Europe Sovereign country ## 112 Europe Eastern Europe Sovereign country ## 113 Europe Eastern Europe Sovereign country ## 114 Europe Eastern Europe Sovereign country ## 115 Europe Western Europe Sovereign country ## 116 Europe Eastern Europe Sovereign country ## 117 Europe Eastern Europe Sovereign country ## 118 Europe Eastern Europe Sovereign country ## 119 Europe Northern Europe Sovereign country ## 120 Europe Northern Europe Sovereign country ## 121 Europe Northern Europe Sovereign country ## 122 Europe Western Europe Sovereign country ## 123 Europe Eastern Europe Sovereign country ## 124 Europe Southern Europe Sovereign country ## 125 Asia Western Asia Sovereign country ## 126 Europe Southern Europe Sovereign country ## 127 Europe Southern Europe Sovereign country ## 128 Europe Western Europe Sovereign country ## 129 Europe Western Europe Sovereign country ## 130 Europe Western Europe Sovereign country ## 131 Europe Western Europe Country ## 132 Europe Southern Europe Sovereign country ## 133 Europe Southern Europe Sovereign country ## 134 Europe Northern Europe Sovereign country ## 135 Oceania Melanesia Dependency ## 136 Oceania Melanesia Sovereign country ## 137 Oceania Australia and New Zealand Country ## 138 Oceania Australia and New Zealand Country ## 139 Asia Southern Asia Sovereign country ## 140 Asia Eastern Asia Country ## 141 Asia Eastern Asia Sovereign country ## 142 Europe Southern Europe Sovereign country ## 143 Europe Northern Europe Country ## 144 Europe Northern Europe Country ## 145 Europe Northern Europe Sovereign country ## 146 Asia Western Asia Sovereign country ## 147 Asia Western Asia Sovereign country ## 148 Asia South-Eastern Asia Sovereign country ## 149 Asia South-Eastern Asia Sovereign country ## 150 Asia South-Eastern Asia Sovereign country ## 151 Europe Southern Europe Sovereign country ## 152 Europe Northern Europe Country ## 153 Europe Eastern Europe Sovereign country ## 154 Europe Eastern Europe Sovereign country ## 155 Africa Eastern Africa Sovereign country ## 156 Asia Eastern Asia Sovereign country ## 157 Americas South America Sovereign country ## 158 Asia Western Asia Sovereign country ## 159 Asia Western Asia Sovereign country ## 160 Antarctica Antarctica Indeterminate ## 161 Asia Western Asia Sovereign country ## 162 Asia Western Asia Sovereign country ## 163 Africa Northern Africa Sovereign country ## 164 Africa Northern Africa Sovereign country ## 165 Africa Northern Africa Sovereign country ## 166 Africa Eastern Africa Sovereign country ## 167 Africa Eastern Africa Sovereign country ## 168 Africa Eastern Africa Indeterminate ## 169 Africa Eastern Africa Sovereign country ## 170 Africa Eastern Africa Sovereign country ## 171 Europe Southern Europe Sovereign country ## 172 Europe Southern Europe Sovereign country ## 173 Europe Southern Europe Sovereign country ## 174 Europe Southern Europe Sovereign country ## 175 Europe Southern Europe Sovereign country ## 176 Americas Caribbean Sovereign country ## 177 Africa Eastern Africa Sovereign country ## area_km2 pop lifeExp gdpPercap coffee_production_2016 ## 1 19289.971 885806 69.96000 8222.2538 NA ## 2 932745.792 52234869 64.16300 2402.0994 81 ## 3 96270.601 NA NA NA NA ## 4 10036042.977 35535348 81.95305 43079.1425 NA ## 5 9510743.745 318622525 78.84146 51921.9846 NA ## 6 2729810.513 17288285 71.62000 23587.3375 NA ## 7 461410.258 30757700 71.03900 5370.8658 NA ## 8 464520.072 7755785 65.23000 3709.0816 114 ## 9 1819251.329 255131116 68.85600 10003.0890 742 ## 10 2784468.589 42981515 76.25200 18797.5479 NA ## 11 814844.220 17613798 79.11700 22195.2744 NA ## 12 2323492.477 73722860 58.78200 785.3473 NA ## 13 484332.793 13513125 55.46700 NA NA ## 14 590836.914 46024250 66.24200 2753.2361 60 ## 15 1850885.565 37737913 64.00200 4188.3348 NA ## 16 1271694.598 13569438 52.20400 2076.6500 NA ## 17 28540.546 10572466 62.75700 1652.8548 NA ## 18 48157.874 10405844 73.48300 12663.0422 1 ## 19 17018507.409 143819666 70.74366 25284.5862 NA ## 20 15584.791 382169 75.37900 28456.8165 NA ## 21 16363.799 NA NA NA NA ## 22 397994.629 NA NA NA NA ## 23 2206644.440 56295 NA NA NA ## 24 11602.572 NA NA NA NA ## 25 14714.931 1212814 68.28500 6262.9055 14 ## 26 1216400.831 54539571 60.99300 12389.7147 NA ## 27 27505.655 2145785 53.26800 2677.1981 NA ## 28 1969480.307 124221600 76.75300 16622.5970 151 ## 29 176853.636 3419546 77.19000 19827.5650 NA ## 30 8508557.092 204213133 75.04200 15374.2615 3277 ## 31 1085269.596 10562159 68.35700 6324.8273 3 ## 32 1309699.636 30973354 74.51800 11547.8342 585 ## 33 1151882.926 47791911 74.02200 12715.9674 1330 ## 34 75265.449 3903986 77.61000 20017.9944 3 ## 35 53832.136 4757575 79.44000 14372.4008 28 ## 36 129540.212 6013997 74.88400 4784.8305 42 ## 37 113789.775 8809216 73.18100 4231.3251 149 ## 38 20893.340 6281189 73.01500 6890.7232 5 ## 39 109459.049 15923559 72.86900 7147.4292 58 ## 40 22045.451 351694 70.02700 7999.5737 NA ## 41 908499.070 30738378 74.19600 16745.0220 NA ## 42 209801.857 763393 66.42500 6906.0123 NA ## 43 144268.723 547928 71.13800 15306.6924 NA ## 44 644847.882 NA NA NA NA ## 45 250747.110 15903112 75.87900 10901.4186 87 ## 46 9224.663 3534874 79.39012 35066.0464 NA ## 47 12460.587 2862087 75.68900 8051.2440 NA ## 48 114866.218 11439767 79.41500 NA NA ## 49 376328.489 15411675 59.36000 1925.1387 1 ## 50 591912.017 2168573 64.78000 15914.6702 NA ## 51 824886.561 2370992 62.98100 9617.3970 NA ## 52 194390.439 14546111 66.37600 2218.5519 NA ## 53 1235561.373 16962846 57.00700 1865.1606 NA ## 54 1054107.194 4063920 62.90700 3655.3885 NA ## 55 116998.713 10286712 60.37300 2001.0773 NA ## 56 1182269.648 19148219 59.22800 904.4567 NA ## 57 905071.739 176460502 52.54900 5671.9006 NA ## 58 460324.702 22239904 57.11100 3196.3615 8 ## 59 60966.962 7228915 59.60100 1315.3403 2 ## 60 243473.120 26962563 62.15400 3868.6009 1 ## 61 329825.951 22531350 52.52000 3054.5349 114 ## 62 239565.079 11805509 58.84600 1734.7367 NA ## 63 36191.886 1725744 56.59800 1398.2548 NA ## 64 98206.783 4390737 61.52700 804.7199 NA ## 65 75980.331 7079162 50.95100 1692.1421 1 ## 66 271593.672 17585977 59.45700 1582.3337 NA ## 67 621860.349 4515392 50.62100 597.1352 NA ## 68 339681.855 4871101 63.53600 5538.0529 NA ## 69 269475.798 1875713 65.21100 16678.6381 NA ## 70 27120.575 1129424 57.18000 31542.5108 NA ## 71 751921.215 15620974 60.77500 3632.5038 3 ## 72 111197.018 17068838 61.93200 1090.3672 3 ## 73 810994.757 27212382 57.09900 1079.8239 NA ## 74 18118.634 1295097 56.28700 7870.9707 NA ## 75 1245463.748 26920466 60.85800 6257.1529 NA ## 76 26238.948 9891790 56.68800 803.1728 37 ## 77 22991.166 8215700 82.15366 31702.0835 NA ## 78 10099.003 5603279 79.23100 13831.3752 NA ## 79 589382.827 23589801 65.13300 1372.0210 3 ## 80 5037.104 4294682 73.12600 4319.5283 NA ## 81 14031.284 1917852 60.70700 1550.2184 NA ## 82 156237.322 11143908 75.33500 10767.0277 NA ## 83 2315916.658 39113313 75.64100 13483.3379 NA ## 84 89207.137 8809306 74.03400 8622.1855 NA ## 85 79880.738 9070867 76.94800 63943.1858 NA ## 86 11327.855 2374419 77.88800 120860.0676 NA ## 87 16652.120 3782450 74.45800 70832.3684 NA ## 88 436965.034 35006080 69.45800 14838.3829 NA ## 89 309302.034 3960925 76.57800 40365.2733 NA ## 90 7490.040 258850 71.70900 2892.3416 NA ## 91 182235.978 15270790 68.25100 3124.3193 NA ## 92 510125.570 68416772 74.89500 14857.2029 39 ## 93 229080.422 6576397 65.97500 5436.4826 NA ## 94 679573.994 51924182 66.28500 4770.0121 NA ## 95 335990.802 92544915 75.85500 5264.8281 1844 ## 96 125679.216 25116363 71.17900 NA NA ## 97 99044.367 50746659 81.72195 33425.6896 NA ## 98 1544322.150 2923896 68.84700 11348.6473 NA ## 99 3142892.098 1293859294 68.02100 5385.1418 453 ## 100 133782.141 159405279 71.80300 2973.0416 NA ## 101 39377.402 776448 69.43000 7366.4241 NA ## 102 150706.871 28323241 69.51100 2266.1843 NA ## 103 874119.998 185546257 66.13900 4576.2270 NA ## 104 652270.070 32758020 62.89500 1838.9602 NA ## 105 138111.759 8362745 70.69000 2546.5005 NA ## 106 195874.658 5835500 70.40244 3181.6422 NA ## 107 480809.522 5466241 67.55200 14332.3658 NA ## 108 1617559.040 78411092 75.46600 16924.2007 NA ## 109 185004.125 19203090 69.81700 NA NA ## 110 28656.601 2906220 74.25500 7971.1179 NA ## 111 450581.582 9696110 82.25366 44167.6319 NA ## 112 208969.830 9474511 72.97073 17944.2098 NA ## 113 572548.984 45271947 71.18659 8243.4735 NA ## 114 310402.333 38011735 77.60244 24347.0737 NA ## 115 85064.895 8546356 81.49024 44320.5020 NA ## 116 92476.460 9866468 75.76341 24161.4255 NA ## 117 32320.392 3556397 71.25800 4762.7809 NA ## 118 238356.297 19908979 74.96098 19677.5203 NA ## 119 63831.091 2932367 74.51707 26258.2101 NA ## 120 63923.533 1993782 74.12439 22172.2535 NA ## 121 44678.197 1314545 77.03415 27113.6859 NA ## 122 357430.341 80982500 81.09024 43560.6192 NA ## 123 110216.875 7223938 74.46585 16302.3206 NA ## 124 131964.647 10892413 81.38537 24081.6305 NA ## 125 798849.164 77030628 75.23900 22401.8804 NA ## 126 29694.800 2889104 77.96300 10701.1208 NA ## 127 57530.852 4238389 77.47805 20334.4465 NA ## 128 46185.251 8188649 83.19756 57218.0279 NA ## 129 2416.870 556319 82.22927 93655.3342 NA ## 130 30126.038 11209057 81.28780 41360.3956 NA ## 131 40024.104 16865008 81.70732 45668.4415 NA ## 132 93408.594 10401062 81.12195 26023.6978 NA ## 133 502306.468 46480882 83.22927 31195.4052 NA ## 134 58457.513 4657740 81.34878 48898.3287 NA ## 135 23219.012 268050 77.25287 NA NA ## 136 24728.114 575504 70.11300 2139.5607 NA ## 137 277627.605 4509700 81.40488 34455.3312 NA ## 138 7687613.843 23504138 82.30000 43547.1975 NA ## 139 65370.390 20771000 74.90600 10650.3902 NA ## 140 9409830.493 1364270000 75.93200 12758.6478 NA ## 141 34345.701 NA NA NA NA ## 142 315104.851 60789140 83.09024 33945.8439 NA ## 143 42759.928 5643475 80.70000 45057.0742 NA ## 144 249986.395 64613160 81.30488 38251.7925 NA ## 145 107735.721 327386 82.86098 41701.1373 NA ## 146 91113.254 9535079 71.80000 16715.1055 NA ## 147 69048.161 3727000 72.95100 8749.1562 NA ## 148 292256.939 100102249 68.81300 6585.8959 2 ## 149 338226.487 30228017 74.97600 24194.6339 NA ## 150 10700.334 411704 76.91700 76089.2866 NA ## 151 19118.123 2061980 81.07805 28417.6564 NA ## 152 341242.339 5461512 81.18049 39017.5372 NA ## 153 47068.082 5418649 76.81220 27285.2847 NA ## 154 81207.603 10525347 78.82439 29119.6166 NA ## 155 119319.585 NA 64.17400 NA NA ## 156 404619.933 127276000 83.58780 37337.3174 NA ## 157 401335.916 6552584 72.91300 8501.5435 NA ## 158 455915.007 26246327 64.52300 3766.8053 4 ## 159 1920324.146 30776722 74.23400 49958.4433 NA ## 160 12335956.076 NA NA NA NA ## 161 3786.365 NA NA NA NA ## 162 6207.006 1152309 80.17300 29786.3657 NA ## 163 591718.989 34318082 75.30900 7078.8815 NA ## 164 996311.623 91812566 71.12000 9879.7994 NA ## 165 1633720.717 6204108 71.65900 16371.9022 NA ## 166 1132393.167 97366774 64.53500 1424.5270 215 ## 167 21880.251 912164 62.00600 NA NA ## 168 167349.613 NA NA NA NA ## 169 245768.479 38833338 59.22400 1637.2751 408 ## 170 23365.411 11345357 66.18800 1629.8689 36 ## 171 50605.075 3566002 76.56100 10516.7864 NA ## 172 25062.255 2077495 75.38400 12298.4902 NA ## 173 76388.605 7130576 75.33659 13112.9090 NA ## 174 13443.678 621810 76.71200 14796.6354 NA ## 175 11230.262 1821800 71.09756 8698.2916 NA ## 176 7737.810 1354493 70.42600 31181.8212 NA ## 177 624909.099 11530971 55.81700 1935.8794 NA ## coffee_production_2017 ## 1 NA ## 2 66 ## 3 NA ## 4 NA ## 5 NA ## 6 NA ## 7 NA ## 8 74 ## 9 360 ## 10 NA ## 11 NA ## 12 NA ## 13 NA ## 14 50 ## 15 NA ## 16 NA ## 17 NA ## 18 NA ## 19 NA ## 20 NA ## 21 NA ## 22 NA ## 23 NA ## 24 NA ## 25 2 ## 26 NA ## 27 NA ## 28 220 ## 29 NA ## 30 2786 ## 31 4 ## 32 625 ## 33 1169 ## 34 3 ## 35 32 ## 36 45 ## 37 165 ## 38 8 ## 39 70 ## 40 NA ## 41 NA ## 42 NA ## 43 NA ## 44 NA ## 45 62 ## 46 NA ## 47 1 ## 48 NA ## 49 1 ## 50 NA ## 51 NA ## 52 NA ## 53 NA ## 54 NA ## 55 NA ## 56 NA ## 57 NA ## 58 6 ## 59 3 ## 60 1 ## 61 130 ## 62 NA ## 63 NA ## 64 NA ## 65 3 ## 66 NA ## 67 NA ## 68 NA ## 69 NA ## 70 NA ## 71 NA ## 72 1 ## 73 NA ## 74 NA ## 75 NA ## 76 38 ## 77 NA ## 78 NA ## 79 5 ## 80 NA ## 81 NA ## 82 NA ## 83 NA ## 84 NA ## 85 NA ## 86 NA ## 87 NA ## 88 NA ## 89 NA ## 90 NA ## 91 NA ## 92 16 ## 93 NA ## 94 NA ## 95 1700 ## 96 NA ## 97 NA ## 98 NA ## 99 566 ## 100 NA ## 101 NA ## 102 NA ## 103 NA ## 104 NA ## 105 NA ## 106 NA ## 107 NA ## 108 NA ## 109 NA ## 110 NA ## 111 NA ## 112 NA ## 113 NA ## 114 NA ## 115 NA ## 116 NA ## 117 NA ## 118 NA ## 119 NA ## 120 NA ## 121 NA ## 122 NA ## 123 NA ## 124 NA ## 125 NA ## 126 NA ## 127 NA ## 128 NA ## 129 NA ## 130 NA ## 131 NA ## 132 NA ## 133 NA ## 134 NA ## 135 NA ## 136 NA ## 137 NA ## 138 NA ## 139 NA ## 140 NA ## 141 NA ## 142 NA ## 143 NA ## 144 NA ## 145 NA ## 146 NA ## 147 NA ## 148 NA ## 149 NA ## 150 NA ## 151 NA ## 152 NA ## 153 NA ## 154 NA ## 155 NA ## 156 NA ## 157 NA ## 158 1 ## 159 NA ## 160 NA ## 161 NA ## 162 NA ## 163 NA ## 164 NA ## 165 NA ## 166 283 ## 167 NA ## 168 NA ## 169 443 ## 170 42 ## 171 NA ## 172 NA ## 173 NA ## 174 NA ## 175 NA ## 176 NA ## 177 NA 請注意由於此範例中，world資料內的國家名稱欄位與coffee資料內的國家名稱相同，皆為「name_long」，故若不設定by=引數，亦可得到相同結果。 ⌾ 保留資料1與資料2所有資料 ⌾ 保留共同擁有的參照欄位之資料 2.10 去除重複資料 2.11 資料集合 2.12 資料型態轉換 "]]
