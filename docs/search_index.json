[["資料清洗與處理.html", "Chapter 2 資料清洗與處理 2.1 data.frame 與 data.table 2.2 合併資料 2.3 選取資料欄位 2.4 依條件篩選資料 2.5 新增資料屬性 2.6 條件判斷 2.7 資料分群與統計 2.8 連接資料 2.9 資料排序 2.10 去除重複資料 2.11 資料集合 2.12 資料型態轉換", " Chapter 2 資料清洗與處理 資料清洗與處理是分析前的第一步，透過此一步驟可初步觀察資料的趨勢，並以圖表呈現敘述統計結果。此外，在經過完善的資料整理後，尚能進一步建構統計模型或數據分析工具以瞭解資料背後所衍伸之意涵。dplyr與data.table套件是 R 語言中兩大最常見的資料處理工具，請務必安裝並導入該套件。 資料清洗與處理常用之套件與函式彙整如表2.1。 表 2.1: 資料處理重要函式 套件 函式 功能 base merge() 根據指定欄位連接兩資料 dplyr bind_rows() 合併橫列 bind_cols() 合併直行 select() 選取特定欄位 filter() 根據條件篩選資料 mutate() 新增資料屬性（直行） group_by() 將資料依據特定欄位分群` summarise() 將分群的資料予以計算 reframe() 將分群的資料予以計算 slice() 依據分群擷取特定資料 left_join() 根據指定欄位連接兩資料（僅保留左側資料） inner_join() 根據指定欄位連接兩資料（擁有的資料皆須保留） full_join() 根據指定欄位連接兩資料（僅保留共同擁有的資料） arrange() 根據指定欄位將資料排序 rename() 更改欄位名稱 distinct() 去除重複資料 intersect() 尋找兩資料中共同擁有的資料列（交集） union() 保留所有擁有的資料列（聯集，去除重複者） union_all() 保留所有擁有的資料列（聯集，保留重複者） setdiff() 尋找唯獨左側資料擁有的資料列（差集） symdiff() 尋找唯獨其中一份資料擁有的資料列（互斥） setequal() 檢查兩資料是否完全相同（無論排序） case_when() 條件判斷 data.table setDT() 將資料轉換為data.table形式 setkey() 設定data.table資料的主鍵 dcast() 轉換長資料為寬資料 melt() 轉換寬資料為長資料 為展示「資料清洗與處理」過程，後續範例中我們會使用的資料如下，請先讀取之。 # 世界國家資料 world=read.csv(&quot;https://raw.githubusercontent.com/ChiaJung-Yeh/Transport-Analysis/master/Data/world.csv&quot;) # 咖啡產量資料 coffee=read.csv(&quot;https://raw.githubusercontent.com/ChiaJung-Yeh/Transport-Analysis/master/Data/coffee.csv&quot;) 世界國家資料（world）中詳記各國資訊，包括人口數（pop）、面積（area_km2）、lifeExp（壽命）、gdpPerCap（人均 GDP）等；咖啡（coffee）資料中詳記世界各國 2016 與 2017 年的咖啡產量。 2.1 data.frame 與 data.table dplyr與data.table套件所提供的各函式大多功能皆相同，惟使用data.table套件的函式時，必須將資料型別新增 data.table 之格式，尚能正確分析。此外，data.table套件的執行效率通常較高，在大數據處理上極具優勢（依據實務經驗而論，若處理的資料筆數上達千萬筆，建議使用data.table套件），而若數據量較小時兩者的速度不相上下。關於兩資料分析套件的速度比較請參考以下文章： Comparing Efficiency and Speed of data.table data.table speed with dplyr syntax ⌾ 新增 data.table 資料格式 若欲針對原 data.frame 新增 data.table 之資料格式，可利用setDT()函式新增之，以world資料為例，程式碼撰寫如下。 # 使用read.csv()讀取資料 -&gt; data.frame() world_DT=read.csv(&quot;https://raw.githubusercontent.com/ChiaJung-Yeh/Transport-Analysis/master/Data/world.csv&quot;) # 查看資料型態 class(world_DT) ## [1] &quot;data.frame&quot; # setDT()函式新增data.table格式 setDT(world_DT) # 再次查看資料型態 class(world_DT) ## [1] &quot;data.table&quot; &quot;data.frame&quot; 由最後輸出結果可知，world_DT資料經過setDT()函式設定後即新增 data.table 格式，同時亦會保留 data.frame 格式。 ⌾ 新增主鍵 主鍵是資料中用以標示「關鍵的」屬性欄位，「關鍵」意謂該欄位具有唯一性，可以用其檢索整份資料，不會重複匹配至多比不同的資料。舉例而言，在考生成績的資料中，我們會利用學生的學號、姓名等作為主鍵，因為其具有代表性，可以表示特定資料；然而，我們不會利用學生的分數作為主鍵，因為分數值很可能是重複的，無法表示特定一筆資料。 根據上述，在 data.table 的資料格式中，主鍵是相當關鍵的要素，亦為使data.table套件效率甚高的其一原因。以world_DT資料為例，將「name_long」（國家名稱）設定為主鍵，函式撰寫如下。 # 建立主鍵 setDT(world_DT, name_long) 2.2 合併資料 在第一章節中，我們曾提及資料框的行列合併，包含rbind()與cbind()兩函式，而dplyr套件所提供的bind_rows()與bind_cols()其目的相同，前者用以合併橫列；後者用以合併直行。其中bind_cols()與cbind()兩者功能完全相同。惟rbind()函式的使用前提是，輸入的兩資料必須擁有完全相同的欄位，一旦其中一個欄位不符合即無法合併資料。bind_rows()函式則可較彈性合併資料，針對共同擁有的欄位予以合併，其他則忽略之。具體範例如下。 # 建立兩資料 score_data1=data.frame(Student=c(&quot;Robert&quot;, &quot;Jessie&quot;, &quot;Rose&quot;, &quot;John&quot;), Class=c(&quot;A&quot;, &quot;B&quot;, &quot;D&quot;, &quot;C&quot;), Score=c(&quot;80&quot;, &quot;95&quot;, &quot;70&quot;, &quot;65&quot;)) score_data2=data.frame(Student=c(&quot;Penny&quot;, &quot;Ruby&quot;, &quot;Tom&quot;), Score=c(&quot;90&quot;, &quot;70&quot;, &quot;50&quot;)) rbind(score_data1, score_data2) ## Error in rbind(deparse.level, ...): 變數的行數無效 由以上rbind()函式之範例可知，由於score_data1含有「Class」欄位，而score_data2並不包含，故無法成功合併兩資料。此時可嘗試利用bind_rows()函式，程式碼撰寫如下。 bind_rows(score_data1, score_data2) ## Student Class Score ## 1 Robert A 80 ## 2 Jessie B 95 ## 3 Rose D 70 ## 4 John C 65 ## 5 Penny &lt;NA&gt; 90 ## 6 Ruby &lt;NA&gt; 70 ## 7 Tom &lt;NA&gt; 50 輸出結果中，score_data2雖並無「Class」欄位，仍可將兩資料予以合併，並在缺失的資料中填補NA。 2.3 選取資料欄位 在第一章節中，我們曾提及資料框選取欄位的方法，而dplyr套建亦提供相同功能的select()函式，函式撰寫如下。 select(資料, 欄位名稱1, 欄位名稱2, ...) ⌾ 選取欄位 以選取world資料中的「name_long」和「area_km2」兩欄位為例，程式碼撰寫如下。 # 選取name_long與area_km2兩欄位 world_sel1=select(world, name_long, area_km2) # 查看前六筆資料 head(world_sel1) ## name_long area_km2 ## 1 Fiji 19289.97 ## 2 Tanzania 932745.79 ## 3 Western Sahara 96270.60 ## 4 Canada 10036042.98 ## 5 United States 9510743.74 ## 6 Kazakhstan 2729810.51 使用data.table套件選取欄位，程式碼撰寫如下。 world_DT[, .(name_long, area_km2)] 其他寫法包括（請回顧選取欄位章節）： # 給定欄位索引 world[, c(1,7)] # 給定欄位名稱 world[, c(&quot;name_long&quot;, &quot;area_km2&quot;)] # 回傳單一欄位 world$name_long world$area_km2 此外，亦可將欲返回的欄位儲存於一文字向量中，並透過all_of()函式回傳之，程式碼撰寫如下。 # 選取name_long與area_km2兩欄位 sel_col_name=c(&quot;name_long&quot;, &quot;continent&quot;, &quot;subregion&quot;) # 使用all_of()函式 world_sel2=select(world, all_of(sel_col_name)) # 查看前六筆資料 head(world_sel2) ## name_long continent subregion ## 1 Fiji Oceania Melanesia ## 2 Tanzania Africa Eastern Africa ## 3 Western Sahara Africa Northern Africa ## 4 Canada North America Northern America ## 5 United States North America Northern America ## 6 Kazakhstan Asia Central Asia 使用data.table套件選取欄位，程式碼撰寫如下。 world_DT[, ..sel_col_name] ⌾ 刪除欄位 若欲刪除特定欄位，可利用-在欄位名稱前即可刪除之。 # 刪除continent、region_un、subregion、type欄位 world_sel3=select(world, -continent, -region_un, -subregion, -type) # 查看前六筆資料 head(world_sel3) ## iso_a2 name_long area_km2 pop lifeExp gdpPercap ## 1 FJ Fiji 19289.97 885806 69.96000 8222.254 ## 2 TZ Tanzania 932745.79 52234869 64.16300 2402.099 ## 3 EH Western Sahara 96270.60 NA NA NA ## 4 CA Canada 10036042.98 35535348 81.95305 43079.143 ## 5 US United States 9510743.74 318622525 78.84146 51921.985 ## 6 KZ Kazakhstan 2729810.51 17288285 71.62000 23587.338 使用data.table套件刪除欄位，程式碼撰寫如下。 del_col_name=c(&quot;continent&quot;,&quot;region_un&quot;,&quot;subregion&quot;,&quot;type&quot;) world_DT[, !..del_col_name] 2.4 依條件篩選資料 條件篩選資料可以利用filter()函式達成之，函式撰寫如下。 filter(資料, 條件1, 條件2, ...) 以上條件1與條件2是用以篩選資料中符合條件者，最終所回傳的資料必然符合函式內所有的條件。 ⌾ 數值向量篩選 以篩選world資料中，人口數（pop）超過 1 億人者。 # 篩選人口數超過1億的資料 world_fil1=filter(world, pop&gt;100000000) # 查看前六筆資料 head(world_fil1) ## iso_a2 name_long continent region_un subregion ## 1 US United States North America Americas Northern America ## 2 ID Indonesia Asia Asia South-Eastern Asia ## 3 RU Russian Federation Europe Europe Eastern Europe ## 4 MX Mexico North America Americas Central America ## 5 BR Brazil South America Americas South America ## 6 NG Nigeria Africa Africa Western Africa ## type area_km2 pop lifeExp gdpPercap ## 1 Country 9510743.7 318622525 78.84146 51921.985 ## 2 Sovereign country 1819251.3 255131116 68.85600 10003.089 ## 3 Sovereign country 17018507.4 143819666 70.74366 25284.586 ## 4 Sovereign country 1969480.3 124221600 76.75300 16622.597 ## 5 Sovereign country 8508557.1 204213133 75.04200 15374.262 ## 6 Sovereign country 905071.7 176460502 52.54900 5671.901 # 查看查看符合條件的總資料筆數（亦即國家數） nrow(world_fil1) ## [1] 12 使用data.table套件篩選資料，程式碼撰寫如下。 world_DT[pop&gt;100000000] ⌾ 文字向量篩選 通常文字篩選時會利用%in%以查看一向量各元素是否存在於另一向量中，請參照向量 Vector小節中「⌾ 檢查元素是否包含於向量」。 以篩選world資料中，所在洲隸屬於亞洲（Asia）以及歐洲（Europe）者。 # filter data by population world_fil2=filter(world, continent %in% c(&quot;Asia&quot;, &quot;Europe&quot;)) # check out the first 6 rows head(world_fil2) ## iso_a2 name_long continent region_un subregion ## 1 KZ Kazakhstan Asia Asia Central Asia ## 2 UZ Uzbekistan Asia Asia Central Asia ## 3 ID Indonesia Asia Asia South-Eastern Asia ## 4 RU Russian Federation Europe Europe Eastern Europe ## 5 NO Norway Europe Europe Northern Europe ## 6 TL Timor-Leste Asia Asia South-Eastern Asia ## type area_km2 pop lifeExp gdpPercap ## 1 Sovereign country 2729810.51 17288285 71.62000 23587.338 ## 2 Sovereign country 461410.26 30757700 71.03900 5370.866 ## 3 Sovereign country 1819251.33 255131116 68.85600 10003.089 ## 4 Sovereign country 17018507.41 143819666 70.74366 25284.586 ## 5 Sovereign country 397994.63 NA NA NA ## 6 Sovereign country 14714.93 1212814 68.28500 6262.906 使用data.table套件篩選資料，程式碼撰寫如下。 world_DT[continent %in% c(&quot;Asia&quot;, &quot;Europe&quot;)] ⌾ 多重條件篩選（AND） 在filter()函式中所設定的諸多條件皆須滿足尚會進一步保留資料。以world資料為例，篩選洲隸屬於亞洲以及歐洲，且人口數超過 1 億者。程式碼撰寫如下。 # 依條件篩選資料 world_fil3=filter(world, continent %in% c(&quot;Asia&quot;, &quot;Europe&quot;), pop&gt;100000000) # 查看前六筆資料 head(world_fil3) ## iso_a2 name_long continent region_un subregion ## 1 ID Indonesia Asia Asia South-Eastern Asia ## 2 RU Russian Federation Europe Europe Eastern Europe ## 3 IN India Asia Asia Southern Asia ## 4 BD Bangladesh Asia Asia Southern Asia ## 5 PK Pakistan Asia Asia Southern Asia ## 6 CN China Asia Asia Eastern Asia ## type area_km2 pop lifeExp gdpPercap ## 1 Sovereign country 1819251.3 255131116 68.85600 10003.089 ## 2 Sovereign country 17018507.4 143819666 70.74366 25284.586 ## 3 Sovereign country 3142892.1 1293859294 68.02100 5385.142 ## 4 Sovereign country 133782.1 159405279 71.80300 2973.042 ## 5 Sovereign country 874120.0 185546257 66.13900 4576.227 ## 6 Country 9409830.5 1364270000 75.93200 12758.648 # 查看查看符合條件的總資料筆數（亦即國家數） nrow(world_fil3) ## [1] 8 除可以直接以「逗號」分隔各項條件外，亦可利用「&amp;」串接所有條件，程式碼撰寫如下。 # 利用&amp;串接所有條件 world_fil4=filter(world, continent %in% c(&quot;Asia&quot;, &quot;Europe&quot;) &amp; pop&gt;100000000) 使用data.table套件篩選資料，程式碼撰寫如下。 world_DT[continent %in% c(&quot;Asia&quot;, &quot;Europe&quot;) &amp; pop&gt;100000000] ⌾ 多重條件（OR） filter()函式係需要所有條件皆滿足尚會回傳資料，然而有時我們希望其一條件成立即可，此時可以將各項條件以「|」分開，程式碼撰寫如下。 # 滿足其一條建篩選資料 world_fil5=filter(world, continent %in% c(&quot;Asia&quot;, &quot;Europe&quot;) | pop&gt;100000000) # 查看查看符合條件的總資料筆數（亦即國家數） nrow(world_fil5) ## [1] 90 使用data.table套件篩選資料，程式碼撰寫如下。 world_DT[continent %in% c(&quot;Asia&quot;, &quot;Europe&quot;) | pop&gt;100000000] 2.5 新增資料屬性 前面所提及的cbind()與bind_cols()函式可以將欄位予以合併，藉此擴充資料屬性。此外，於第一章節中所提及的向量「$」亦可新增資料屬性。除以上寫法外，可利用dplyr套件中的mutate()函式擴增資料屬性，且操作更具有彈性。函式撰寫如下。 mutate(資料, 新變數1=..., 新變數2=..., ...) ⌾ 新增資料屬性 以world資料為例，新增「各國人口密度(pop_dens)」之欄位（人口密度即總人口數除以面積），並新增一欄位串接 continent 和 subregion（使用paste0()函式串接向量）。程式碼撰寫如下。 # 新增人口密度屬性 world_mut=mutate(world, pop_dens=pop/area_km2, district=paste0(continent, &quot; (&quot;, subregion, &quot;)&quot;)) # 查看前六筆資料 head(world_mut[, c(&quot;name_long&quot;, &quot;area_km2&quot;, &quot;pop&quot;, &quot;pop_dens&quot;)]) ## name_long area_km2 pop pop_dens ## 1 Fiji 19289.97 885806 45.920547 ## 2 Tanzania 932745.79 52234869 56.001184 ## 3 Western Sahara 96270.60 NA NA ## 4 Canada 10036042.98 35535348 3.540773 ## 5 United States 9510743.74 318622525 33.501326 ## 6 Kazakhstan 2729810.51 17288285 6.333145 使用data.table套件新增資料屬性，程式碼撰寫如下。 # 新增一個變數時 world_mut=world_DT[, pop_dens := pop/area_km2] # 新增多個變數時 world_mut=world_DT[, c(&quot;pop_dens&quot;, &quot;district&quot;) := .(pop/area_km2, paste0(continent, &quot; (&quot;, subregion, &quot;)&quot;))] 由以上程式碼可知，透過data.table套件新增欄位時，須利用「:=」定義運算方式，並將新增的欄位名稱置於其左側，而運算過程則放置於右側。 其他寫法如下（請回顧擴增資料欄（新增屬性）小節）： # 利用$直接新增欄位 world$pop_dens=world$pop/world$area_km2 world$district=paste0(world$continent, &quot; (&quot;, world$subregion, &quot;)&quot;) 2.6 條件判斷 ⌾ 使用ifelse()函式判斷 於前一章中有提及「邏輯判斷」的流程控制方法，其中ifelse()函式可大幅縮減程式碼。在此亦可透過mutate()函式搭配ifelse()函式建立邏輯判斷的結果。以world資料為例，新增一欄位判斷國家面積的大小，若國家面積大於整體資料中位數，標記為「L」；否則記錄為「S」。程式碼撰寫如下。 # 先計算面積中位數 area_med=median(world$area_km2) # 利用ifelse函式判斷類群 world_ifel=mutate(world, TYPE=ifelse(area_km2&gt;=area_med, &quot;L&quot;, &quot;S&quot;)) # 查看六筆資料 head(world_ifel[, c(&quot;name_long&quot;, &quot;area_km2&quot;, &quot;TYPE&quot;)]) ⌾ 使用case_when()函式判斷 ifelse()函式較適合應用於單純的邏輯判斷，若涉及多項判斷式可能須因而建立巢狀迴圈，使程式碼變得甚為複雜。此時我們可應用dplyr套件中的case_when()函式，同樣搭配mutate()函式以新增欄位。case_when()函式撰寫架構如下： case_when(欄位, 條件1 ~ 結果1, 條件2 ~ 結果2, TRUE ~ 結果3, ...) 其中的「TRUE」意謂著若前面所有條件皆「不成立」時，則回傳TRUE賦予的結果。 再次以world資料為例，若欲將所有國家依據面積及人口數予以分類，並藉由中位數劃分數值高低，最後分為「面積大人口多（LALP）」、「面積大人口少（LASP）」、「面積小人口多（SALP）」與「面積小人口少（SASP）」四者。程式碼撰寫如下。 # 先計算面積與人口數中位數 area_med=median(world$area_km2) pop_med=median(world$pop, na.rm=T) # 由於人口數中含有NA值，故設定na.rm=T以移除NA值後再計算 # 使用case_when()函式新增分類 world_casewhen=mutate(world, TYPE=case_when( area_km2&gt;=area_med &amp; pop&gt;=pop_med ~ &quot;LALP&quot;, area_km2&gt;=area_med &amp; pop&lt;pop_med ~ &quot;LASP&quot;, area_km2&lt;area_med &amp; pop&gt;=pop_med ~ &quot;SALP&quot;, TRUE ~ &quot;SASP&quot; )) # 查看六筆資料 head(world_casewhen[, c(&quot;name_long&quot;, &quot;area_km2&quot;, &quot;pop&quot;, &quot;TYPE&quot;)]) 2.7 資料分群與統計 2.8 連接資料 2.9 資料排序 2.10 去除重複資料 2.11 資料集合 2.12 資料型態轉換 "]]
