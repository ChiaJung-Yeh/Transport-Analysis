[["r-語言基礎語法.html", "Chapter 1 R 語言基礎語法 1.1 物件（Object） 1.2 dplyr資料處理", " Chapter 1 R 語言基礎語法 本章節系統性介紹 R 語言的重要語法和dplyr套件的功能及用法，請務必熟悉各函式，以便後續程式碼撰寫。 1.1 物件（Object） 物件是 R 語言中構成資料的基本要素，常見者包含五大類： 向量（vector） 因子（factor） 矩陣（matrix） 資料框（data frame） 陣列（list） 以下小節針對各基本要素的構建與運算詳細說明。 1.1.1 向量（Vector） ⌾ 向量的性質 一組值 一維 資料型態可為：數值、文字、邏輯值 ⌾ 建立向量 建立向量可利用c()函式建構。 數值向量 vec1=c(1,2,3,4,5) ## [1] 1 2 3 4 5 文字向量 vec2=c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;) ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; 邏輯向量 vec3=c(T,F,T,F,T) # 或寫完整的邏輯值 vec3=c(TRUE,FALSE,TRUE,FALSE,TRUE) ## [1] TRUE FALSE TRUE FALSE TRUE ⌾ 擷取向量中特定元素 擷取單一元素 vec2[3] ## [1] &quot;C&quot; 擷取多個連續元素 vec2[2:4] ## [1] &quot;B&quot; &quot;C&quot; &quot;D&quot; 擷取多個非連續元素 vec2[c(1,3,5)] ## [1] &quot;A&quot; &quot;C&quot; &quot;E&quot; 以邏輯值擷取元素 請注意輸入的邏輯值向量長度必須與原向量相同！ vec2[c(T,T,F,F,T)] ## [1] &quot;A&quot; &quot;B&quot; &quot;E&quot; ⌾ 連續數值資料 利用seq()函式建立連續數值，程式碼撰寫如下： seq(from=開始數值, to=結束數值, by=遞增數值) seq(from=2, to=20, by=2) ## [1] 2 4 6 8 10 12 14 16 18 20 ⌾ 向量運算 統計運算 以下建立一個向量vec4作為範例，所有運算的程式碼與結果請參照表1.1。 vec4=c(5,9,3,15,6,2,8,12) 表 1.1: 向量運算 運算 程式碼 輸出結果 最大值 max(vec4) 15 最小值 min(vec4) 2 最大值索引 which.max(vec4) 4 最小值索引 which.min(vec4) 6 全域 range(vec4) 2 15 總和 sum(vec4) 60 平均 mean(vec4) 7.5 中位數 median(vec4) 7 乘積 prod(vec4) 2332800 變異數 var(vec4) 19.714 標準差 sd(vec4) 4.44 數學運算 以下利用vec4與新建向量vec5作為範例，所有運算的程式碼與結果請參照表1.2。。 vec5=c(0.57,4.28,-1.23,6.58,-4.67,2.09) 表 1.2: 數學運算 運算 程式碼 輸出結果 絕對值 abs(vec5) 0.57 4.28 1.23 6.58 4.67 2.09 根號 sqrt(vec4) 2.236 3 1.732 3.873 2.449 1.414 2.828 3.464 四捨五入 round(vec5, digits=1) 0.6 4.3 -1.2 6.6 -4.7 2.1 取整函數 ceiling(vec5) 1 5 -1 7 -4 3 下取整函數 floor(vec5) 0 4 -2 6 -5 2 對數 log(vec4) 1.609 2.197 1.099 2.708 1.792 0.693 2.079 2.485 指數 exp(vec4) 148.4 8103.1 20.1 3269017.4 403.4 7.4 2981 162754.8 標準化 scale(vec4) -0.563 0.338 -1.013 1.689 -0.338 -1.239 0.113 1.013 累積加總 cumsum(vec4) 5 14 17 32 38 40 48 60 ⌾ 向量長度 計算向量中的元素個數。 length(vec4) ## [1] 8 ⌾ 向量統計 統計向量中各元素的個數。 vec_tab=c(&quot;A&quot;,&quot;C&quot;,&quot;B&quot;,&quot;D&quot;,&quot;E&quot;,&quot;C&quot;,&quot;E&quot;,&quot;B&quot;,&quot;A&quot;,&quot;E&quot;,&quot;E&quot;,&quot;B&quot;) table(vec_tab) ## vec_tab ## A B C D E ## 2 3 2 1 4 ⌾ 向量排序 sort()函式直接將向量予以由小至大之排序 order()函式回傳向量由小至大排序所對應的原向量序號 rank()函式回傳向量中各元素由小至大之順序 程式碼撰寫如下，請參照圖1.1之示意圖。 圖 1.1: 排序函式示意圖 sort(vec4) ## [1] 2 3 5 6 8 9 12 15 order(vec4) ## [1] 6 3 1 5 7 2 8 4 rank(vec4) ## [1] 3 6 2 8 4 1 5 7 由sort()的結果可知，其將vec4向量由小至大排序。order()則是回傳排序所對應至原向量的序號，例如回傳結果的最後一個值是4，表示該向量中最大的數值位於向量的第 4 個元素。根據上述，我們亦可透過如下程式碼達到與sort()相同的結果。 vec4[order(vec4)] ## [1] 2 3 5 6 8 9 12 15 ⌾ 向量唯一值 去除重複的值。 vec_dup=c(1,9,5,2,6,1,8,5,2) unique(vec_dup) ## [1] 1 9 5 2 6 8 ⌾ 檢查使否存在 NA vec_na=c(1,9,5,NA,6,NA) is.na(vec_na) ## [1] FALSE FALSE FALSE TRUE FALSE TRUE ⌾ 向量四則運算 以下範例使用vec4與新建立的vec6示範向量的四則運算。 vec6=c(2,5,8,11,7,4,10,3) 兩向量運算 兩向量運算時，兩組向量的長度（length()）務必相同！ 所有運算結果如表1.3。 表 1.3: 向量運算 運算 程式碼 輸出結果 vec4=c(5,9,3,15,6,2,8,12) vec6=c(2,5,8,11,7,4,10,3) 加法 vec4+vec6 7 14 11 26 13 6 18 15 減法 vec4-vec6 3 4 -5 4 -1 -2 -2 9 乘法 vec4*vec6 10 45 24 165 42 8 80 36 除法 vec4/vec6 2.5 1.8 0.375 1.364 0.857 0.5 0.8 4 取餘數 vec4 %% vec6 1 4 3 4 6 2 8 0 取除數 vec4 %/% vec6 2 1 0 1 0 0 0 4 內積 vec4 %*% vec6 410 向量與元素運算 一組向量與一個元素之間的運算，即是將向量中的每一個元素分別與該元素運算。 vec6+5 ## [1] 7 10 13 16 12 9 15 8 vec6*5 ## [1] 10 25 40 55 35 20 50 15 ⌾ 轉換資料型態 文字轉換為數值 建立vec_cha文字資料 vec_cha=c(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;) 先利用class()函式檢查vec_cha資料型態 class(vec_cha) ## [1] &quot;character&quot; 利用as.numeric()函式轉化為數值資料 as.numeric(vec_cha) ## [1] 1 2 3 4 5 數值轉換為文字 另外，可利用as.character()函式轉化為文字資料 vec_num=c(1,2,3,4,5) as.character(vec_num) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; ⌾ 建立重複資料 利用rep()函式建立重複資料，該函式主要有兩大參數可以設定： each=是設定每一個元素重複的次數 times=是設定該向量整體循環的次數 以實際範例說明之，程式碼撰寫如下： vec6=c(2,5,8,11,7,4,10,3) # 設定每一個元素重複的次數 rep(vec6, each=2) ## [1] 2 2 5 5 8 8 11 11 7 7 4 4 10 10 3 3 # 設定向量整體重複的次數 rep(vec6, times=2) ## [1] 2 5 8 11 7 4 10 3 2 5 8 11 7 4 10 3 ⌾ 回傳向量中 TRUE 索引值 which()函式可用以回傳向量中 TRUE 的索引值。 TRUE 索引值 vec3=c(T,F,T,F,T) which(vec3) ## [1] 1 3 5 由上述範例可知，TRUE 位於vec3向量的第 1、3、5 個元素。 回傳符合條件索引值 除了上述基本案例外，通常我們會藉由運算子（==, &gt;, &lt;, …）以尋找符合條件的元素，並進一步透過which()函式回傳結果為 TRUE 的索引值。範例如下。 vec6=c(2,5,8,11,7,4,10,3) # vec6大於5的邏輯判斷 vec6&gt;5 ## [1] FALSE FALSE TRUE TRUE TRUE FALSE TRUE FALSE # 回傳vec6大於5的索引值 which(vec6&gt;5) ## [1] 3 4 5 7 1.1.2 因子（Factor） ⌾ 因子的性質 由文字向量建立 須設定文字層級 設立因子的延伸應用： 在ggplot2套件中調整圖例順序 在計量模型中建立啞變量（dummy variables） ⌾ 建立因子 因子的建立可以使用factor()函式，其中必須透過levels=參數設定層級，程式碼建構如下： factor(文字向量, levels=期望的層級向量) 以下列簡單範例說明因子的功能，建立school之文字向量。 school=c(&quot;大學&quot;,&quot;幼稚園&quot;,&quot;國小&quot;,&quot;高中&quot;,&quot;國中&quot;) 若欲將school轉換為具有層級意義的因子，並依據學校層級排序，則程式碼撰寫如下： school_fc=factor(school, levels=c(&quot;幼稚園&quot;,&quot;國小&quot;,&quot;國中&quot;,&quot;高中&quot;,&quot;大學&quot;)) school_fc ## [1] 大學 幼稚園 國小 高中 國中 ## Levels: 幼稚園 國小 國中 高中 大學 由上述可發現，有別於文字向量，因子會另出現「Levels:」的訊息，表示文字具有層級意義。 最後可利用is.factor()函式判斷一變數是否為因子，抑或利用class()函式逕查詢該變數的資料型態。 is.factor(school_fc) ## [1] TRUE class(school_fc) ## [1] &quot;factor&quot; 上述所建立的因子具有層級意義，故可以排序，可進一步利用sort()函式排序，程式碼如下： sort(school_fc) ## [1] 幼稚園 國小 國中 高中 大學 ## Levels: 幼稚園 國小 國中 高中 大學 ⌾ 建立有序因子 上述所建立的因子具有層級意義，可以排序，然而各元素間不具有大小意義，無法直接比較大小值。以school_fc為例，我們所設定的「大學」層級高於「幼稚園」，然而這不意謂著大學&gt;幼稚園。因此若直接拿兩元素相比較大小，程式會出現警告（大小關係對因子無意義），且回傳NA，試驗如下： school_fc[1]&gt;school_fc[2] ## Warning in Ops.factor(school_fc[1], school_fc[2]): &#39;&gt;&#39; 對因子沒有意義 ## [1] NA 若欲建立具大小關係的因子，則需在factor()函式中設定order=T參數，以表達具有順序意義。 school_order=factor(school, levels=c(&quot;幼稚園&quot;,&quot;國小&quot;,&quot;國中&quot;,&quot;高中&quot;,&quot;大學&quot;), order=T) school_order ## [1] 大學 幼稚園 國小 高中 國中 ## Levels: 幼稚園 &lt; 國小 &lt; 國中 &lt; 高中 &lt; 大學 由輸出結果可發現，層級中具有「&lt;」符號，用以表達有序之大小關係。 # 比較幼稚園與大學的大小關係 school_order[1]&gt;school_order[2] ## [1] TRUE ⌾ 轉換資料型態 可透過as.character()將因子轉換為單純的文字向量，亦可藉由as.numeric()將因子轉換為數值，而該數值乃依據層級的大小給定，層級越高（後）者，數值愈大。以上述school_fc為案例說明。 # 轉換為文字向量 as.character(school_fc) ## [1] &quot;大學&quot; &quot;幼稚園&quot; &quot;國小&quot; &quot;高中&quot; &quot;國中&quot; # 轉換為數值向量 as.numeric(school_fc) ## [1] 5 1 2 4 3 1.1.3 矩陣（Matrix） ⌾ 矩陣的性質 二維 含括多個橫列（rows）與直行（columns） 可以組合「相同」資料型態的向量 (文字向量、數值向量、邏輯向量) ⌾ 建立矩陣 利用matrix()函式建立矩陣，其中必須設定兩參數： nrow= 設定矩陣的橫列數 ncol= 設定矩陣的直行數 matrix(向量, nrow=, ncol=) 範例如下： mat1=matrix(c(1:15), nrow=3, ncol=5) mat1 ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 4 7 10 13 ## [2,] 2 5 8 11 14 ## [3,] 3 6 9 12 15 由回傳結果可發現，該矩陣是先由上至下，再由左至右填入向量。若希望矩陣的填法是先由左至右，再由上至下，則須設定參數byrow=T，程式碼撰寫如下。 mat2=matrix(c(1:15), nrow=3, ncol=5, byrow=T) mat2 ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 2 3 4 5 ## [2,] 6 7 8 9 10 ## [3,] 11 12 13 14 15 ⌾ 查看矩陣的維度 矩陣是二維的資料，若要進一步該二維資料中的橫列與直行個數，可利用nrow()與ncol()函式分別查看，或逕利用dim()函式查看之。 nrow(mat2) ## [1] 3 ncol(mat2) ## [1] 5 dim(mat2) ## [1] 3 5 ⌾ 回傳矩陣的特定元素 利用中括號[ , ]可回傳特定元素的值，其中逗點前必須放置橫列的索引值，而逗點後則是直行的索引值。 以第 2 橫列第 4 行為例，程式碼撰寫如下。 mat2[2, 4] ## [1] 9 ⌾ 轉置矩陣 藉由t()函式將矩陣予以轉置（transpose）。 t(mat2) ## [,1] [,2] [,3] ## [1,] 1 6 11 ## [2,] 2 7 12 ## [3,] 3 8 13 ## [4,] 4 9 14 ## [5,] 5 10 15 ⌾ 矩陣運算 矩陣的運算是 R 語言的利器，執行效率相當高，在許多統計模型背後的運算亦是牽涉複雜的矩陣運算。以下簡單介紹重要的運算函式。 橫列與直行運算 橫列與直行的加總與平均值計算彙整如表1.4。 表 1.4: 矩陣運算 加總 平均 橫列 rowSums(mat2) rowMeans(mat2) 15 40 65 3 8 13 直行 colSums(mat2) colMeans(mat2) 18 21 24 27 30 6 7 8 9 10 apply()函式應用 試想若沒有1.4中的各個函式用以處理矩陣資料，我們可以透過for()迴圈逐行或逐列針對矩陣運算，以橫列加總（rowSums）為例，程式碼撰寫如下。 for(i in c(1:nrow(mat2))){ cat(sum(mat2[i,]), &quot; &quot;) } ## 15 40 65 然而如是的寫法效率極差，在 R 語言中類似 for() 迴圈的程序可以考慮更高效率的apply()函式取代之，程式語法如下： apply(矩陣資料, 方向, 運算函式) 其中方向有兩種選擇：1表示逐列（row）運算；2表示逐行（column）運算。運算函式可為前述向量運算的任一函式。apply()函式的運算概念如圖1.2之示意圖。 圖 1.2: apply()函式運算示意圖 再次以mat2矩陣為範例，程式碼撰寫如下。 # 逐列加總 (=rowSums) apply(mat2, 1, sum) ## [1] 15 40 65 # 逐行平均 (=colMeans) apply(mat2, 2, mean) ## [1] 6 7 8 9 10 # 逐列尋找最大值索引值 apply(mat2, 1, which.max) ## [1] 5 5 5 # 逐行計算標準差 apply(mat2, 2, sd) ## [1] 5 5 5 5 5 1.1.4 資料框（Data Frame） ⌾ 資料框的性質 類似矩陣（Matrix），但可涵括多種不同的資料型態 功能類似 Excel 的工作表 資料分析中最常見的資料型態 可利用dplyr套件處理資料 (參見dplyr資料處理) ⌾ 建立資料框 資料框的建立如下程式碼： data.frame(VAR1=c(), VAR2=c(), VAR3=c(), ...) VAR1、VAR2、VAR3 皆表示資料框中的變數名稱，亦即表格中的表頭名。 以下簡單範例說明資料框的建構。 StuScore=data.frame(StudentID=c(&quot;ID1&quot;,&quot;ID2&quot;,&quot;ID3&quot;,&quot;ID4&quot;,&quot;ID5&quot;), Name=c(&quot;Bob&quot;,&quot;Mary&quot;,&quot;Robert&quot;,&quot;Jason&quot;,&quot;Jane&quot;), Score=c(60,80,40,50,100)) StuScore ## StudentID Name Score ## 1 ID1 Bob 60 ## 2 ID2 Mary 80 ## 3 ID3 Robert 40 ## 4 ID4 Jason 50 ## 5 ID5 Jane 100 ⌾ 回傳資料欄位名稱 colnames(StuScore) # 或可以直接使用names()函式 names(StuScore) ## [1] &quot;StudentID&quot; &quot;Name&quot; &quot;Score&quot; ⌾ 回傳特定欄列 回傳指定橫列 將列號或邏輯向量置於中括號內的逗號前，惟須注意，使用邏輯向量時，其長度必須與資料列數相同。程式碼撰寫如下。 # 使用列號 StuScore[c(1,3,5),] # 使用邏輯向量 StuScore[c(T,F,T,F,T),] ## StudentID Name Score ## 1 ID1 Bob 60 ## 3 ID3 Robert 40 ## 5 ID5 Jane 100 回傳指定直行 有三種方法可回傳指定（多個）直行，包括： 列號向量 邏輯向量 欄位名稱向量 其中使用邏輯向量時，其長度與資料行數必須相同。程式碼撰寫如下。 # 列號向量 StuScore[, c(1,2)] # 邏輯向量 StuScore[, c(T,F,T,F,T)] # 欄位名稱向量 StuScore[, c(&quot;StudentID&quot;,&quot;Name&quot;)] ## StudentID Name ## 1 ID1 Bob ## 2 ID2 Mary ## 3 ID3 Robert ## 4 ID4 Jason ## 5 ID5 Jane 此外，資料框亦可透過「$」回傳特定單一欄位，程式碼撰寫如下。 資料$欄位名稱 StuScore$Name ## [1] &quot;Bob&quot; &quot;Mary&quot; &quot;Robert&quot; &quot;Jason&quot; &quot;Jane&quot; ⌾ 回傳與編輯指定元素 使用行列索引值 資料[橫列索引, 直行索引] StuScore[2,2] ## [1] &quot;Mary&quot; 編輯指定元素 StuScore[2,2]=&quot;Jessica&quot; StuScore ## StudentID Name Score ## 1 ID1 Bob 60 ## 2 ID2 Jessica 80 ## 3 ID3 Robert 40 ## 4 ID4 Jason 50 ## 5 ID5 Jane 100 ⌾ 查看前後六筆資料 在此我們使用 R 語言內建的iris資料說明。iris資料共計 150 個樣本，並含括三種不同的鳶尾花（setosa、virginica、versicolor），欄位則包含花瓣與花萼的長度與寬度。 回傳前六筆資料 head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa 回傳後六筆資料 tail(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica ⌾ 擴增資料框 擴增資料列（新增紀錄） 若欲新增資料，可以透過rbind()函式連結。程式碼如下。 # 建立欲新增的資料 new_student=data.frame(StudentID=&quot;ID6&quot;, Name=&quot;Roy&quot;, Score=90) # 利用rbind()函式相接 StuScore=rbind(StuScore, new_student) StuScore ## StudentID Name Score ## 1 ID1 Bob 60 ## 2 ID2 Jessica 80 ## 3 ID3 Robert 40 ## 4 ID4 Jason 50 ## 5 ID5 Jane 100 ## 6 ID6 Roy 90 擴增資料欄（新增屬性） 若欲針對整份資料新增屬性（如StuScore中增加性別欄位…），可以透過cbind()函式連結。程式碼如下。 # 建立欲新增之屬性 Gender=c(&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;) # 利用cbind()函式連結 StuScore=cbind(StuScore, Gender) StuScore ## StudentID Name Score Gender ## 1 ID1 Bob 60 M ## 2 ID2 Jessica 80 F ## 3 ID3 Robert 40 M ## 4 ID4 Jason 50 M ## 5 ID5 Jane 100 F ## 6 ID6 Roy 90 M 或可以直接透過「$」新增新欄位內容。程式碼如下： 資料$新欄位=c(...) StuScore$Height=c(180,165,170,160,175,180) StuScore ## StudentID Name Score Gender Height ## 1 ID1 Bob 60 M 180 ## 2 ID2 Jessica 80 F 165 ## 3 ID3 Robert 40 M 170 ## 4 ID4 Jason 50 M 160 ## 5 ID5 Jane 100 F 175 ## 6 ID6 Roy 90 M 180 ⌾ 檢查重複列 為說明範例，在此先行建立一句有重複資料的資料框。 StuScore_dup=data.frame(StudentID=c(&quot;ID1&quot;,&quot;ID2&quot;,&quot;ID4&quot;,&quot;ID3&quot;,&quot;ID4&quot;,&quot;ID5&quot;,&quot;ID2&quot;), Name=c(&quot;Bob&quot;,&quot;Mary&quot;,&quot;Jason&quot;,&quot;Robert&quot;,&quot;Jason&quot;,&quot;Jane&quot;,&quot;Mary&quot;), Score=c(60,80,40,100,40,100,80)) StuScore_dup ## StudentID Name Score ## 1 ID1 Bob 60 ## 2 ID2 Mary 80 ## 3 ID4 Jason 40 ## 4 ID3 Robert 100 ## 5 ID4 Jason 40 ## 6 ID5 Jane 100 ## 7 ID2 Mary 80 由上述結果可知，資料中含有重複的橫列（ID2 &amp; ID4）。我們可以進一步利用duplicated()函式檢查之。 duplicated(StuScore_dup) ## [1] FALSE FALSE FALSE FALSE TRUE FALSE TRUE # 使用which()函式尋找重複的資料列索引 which(duplicated(StuScore_dup)) ## [1] 5 7 由執行結果可知，第 5 與第 7 筆資料屬於重複資料。請務必注意，資料框中首次出現的列不會被視為重複者。 1.1.5 List ⌾ 陣列的性質 物件的集合（可包含向量、矩陣、資料框、陣列…） 最複雜的物件，然其使用彈性相當高 ⌾ 建立陣列 使用list()函式建立陣列資料。 StuScore_list=list(StudentID=c(&quot;ID1&quot;,&quot;ID2&quot;,&quot;ID3&quot;,&quot;ID4&quot;,&quot;ID5&quot;), Name=c(&quot;Bob&quot;,&quot;Mary&quot;,&quot;Robert&quot;,&quot;Jason&quot;,&quot;Jane&quot;), Score=c(60,80,40,50,100), Class=&quot;A&quot;) ## $StudentID ## [1] &quot;ID1&quot; &quot;ID2&quot; &quot;ID3&quot; &quot;ID4&quot; &quot;ID5&quot; ## ## $Name ## [1] &quot;Bob&quot; &quot;Mary&quot; &quot;Robert&quot; &quot;Jason&quot; &quot;Jane&quot; ## ## $Score ## [1] 60 80 40 50 100 ## ## $Class ## [1] &quot;A&quot; ⌾ 回傳陣列屬性 使用陣列$屬性回傳 StuScore_list$Score ## [1] 60 80 40 50 100 使用陣列索引回傳 StuScore_list[[2]] ## [1] &quot;Bob&quot; &quot;Mary&quot; &quot;Robert&quot; &quot;Jason&quot; &quot;Jane&quot; 1.2 dplyr資料處理 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
