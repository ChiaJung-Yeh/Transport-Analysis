[["r-語言基礎語法.html", "Chapter 1 R 語言基礎語法 1.1 物件（Object） 1.2 文字處理 1.3 資料讀取與匯出 1.4 資料清洗與處理", " Chapter 1 R 語言基礎語法 本章節系統性介紹 R 語言的重要語法和dplyr套件的功能及用法，請務必熟悉各函式，以便後續程式碼撰寫。 1.1 物件（Object） 物件是 R 語言中構成資料的基本要素，常見者包含五大類： 向量（vector） 因子（factor） 矩陣（matrix） 資料框（data frame） 陣列（list） 以下小節針對各基本要素的構建與運算詳細說明。 1.1.1 向量（Vector） ⌾ 向量的性質 一組值 一維 資料型態可為：數值、文字、邏輯值 ⌾ 建立向量 建立向量可利用c()函式建構。 數值向量 vec1=c(1,2,3,4,5) ## [1] 1 2 3 4 5 文字向量 vec2=c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;) ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; 邏輯向量 vec3=c(T,F,T,F,T) # 或寫完整的邏輯值 vec3=c(TRUE,FALSE,TRUE,FALSE,TRUE) ## [1] TRUE FALSE TRUE FALSE TRUE ⌾ 擷取向量中特定元素 擷取單一元素 vec2[3] ## [1] &quot;C&quot; 擷取多個連續元素 vec2[2:4] ## [1] &quot;B&quot; &quot;C&quot; &quot;D&quot; 擷取多個非連續元素 vec2[c(1,3,5)] ## [1] &quot;A&quot; &quot;C&quot; &quot;E&quot; 以邏輯值擷取元素 請注意輸入的邏輯值向量長度必須與原向量相同！ vec2[c(T,T,F,F,T)] ## [1] &quot;A&quot; &quot;B&quot; &quot;E&quot; ⌾ 連續數值資料 利用seq()函式建立連續數值，程式碼撰寫如下： seq(from=開始數值, to=結束數值, by=遞增數值) seq(from=2, to=20, by=2) ## [1] 2 4 6 8 10 12 14 16 18 20 ⌾ 向量運算 統計運算 以下建立一個向量vec4作為範例，所有運算的程式碼與結果請參照表1.1。 vec4=c(5,9,3,15,6,2,8,12) 表 1.1: 向量運算 運算 程式碼 輸出結果 最大值 max(vec4) 15 最小值 min(vec4) 2 最大值索引 which.max(vec4) 4 最小值索引 which.min(vec4) 6 全域 range(vec4) 2 15 總和 sum(vec4) 60 平均 mean(vec4) 7.5 中位數 median(vec4) 7 乘積 prod(vec4) 2332800 變異數 var(vec4) 19.714 標準差 sd(vec4) 4.44 數學運算 以下利用vec4與新建向量vec5作為範例，所有運算的程式碼與結果請參照表1.2。。 vec5=c(0.57,4.28,-1.23,6.58,-4.67,2.09) 表 1.2: 數學運算 運算 程式碼 輸出結果 絕對值 abs(vec5) 0.57 4.28 1.23 6.58 4.67 2.09 根號 sqrt(vec4) 2.236 3 1.732 3.873 2.449 1.414 2.828 3.464 四捨五入 round(vec5, digits=1) 0.6 4.3 -1.2 6.6 -4.7 2.1 取整函數 ceiling(vec5) 1 5 -1 7 -4 3 下取整函數 floor(vec5) 0 4 -2 6 -5 2 對數 log(vec4) 1.609 2.197 1.099 2.708 1.792 0.693 2.079 2.485 指數 exp(vec4) 148.4 8103.1 20.1 3269017.4 403.4 7.4 2981 162754.8 標準化 scale(vec4) -0.563 0.338 -1.013 1.689 -0.338 -1.239 0.113 1.013 累積加總 cumsum(vec4) 5 14 17 32 38 40 48 60 ⌾ 向量長度 計算向量中的元素個數。 length(vec4) ## [1] 8 ⌾ 向量統計 統計向量中各元素的個數。 vec_tab=c(&quot;A&quot;,&quot;C&quot;,&quot;B&quot;,&quot;D&quot;,&quot;E&quot;,&quot;C&quot;,&quot;E&quot;,&quot;B&quot;,&quot;A&quot;,&quot;E&quot;,&quot;E&quot;,&quot;B&quot;) table(vec_tab) ## vec_tab ## A B C D E ## 2 3 2 1 4 ⌾ 向量排序 sort()函式直接將向量予以由小至大之排序 order()函式回傳向量由小至大排序所對應的原向量序號 rank()函式回傳向量中各元素由小至大之順序 程式碼撰寫如下，請參照圖1.1之示意圖。 圖 1.1: 排序函式示意圖 sort(vec4) ## [1] 2 3 5 6 8 9 12 15 order(vec4) ## [1] 6 3 1 5 7 2 8 4 rank(vec4) ## [1] 3 6 2 8 4 1 5 7 由sort()的結果可知，其將vec4向量由小至大排序。order()則是回傳排序所對應至原向量的序號，例如回傳結果的最後一個值是4，表示該向量中最大的數值位於向量的第 4 個元素。根據上述，我們亦可透過如下程式碼達到與sort()相同的結果。 vec4[order(vec4)] ## [1] 2 3 5 6 8 9 12 15 ⌾ 向量唯一值 去除重複的值。 vec_dup=c(1,9,5,2,6,1,8,5,2) unique(vec_dup) ## [1] 1 9 5 2 6 8 ⌾ 檢查使否存在 NA vec_na=c(1,9,5,NA,6,NA) is.na(vec_na) ## [1] FALSE FALSE FALSE TRUE FALSE TRUE ⌾ 向量四則運算 以下範例使用vec4與新建立的vec6示範向量的四則運算。 vec6=c(2,5,8,11,7,4,10,3) 兩向量運算 兩向量運算時，兩組向量的長度（length()）務必相同！ 所有運算結果如表1.3。 表 1.3: 向量運算 運算 程式碼 輸出結果 vec4=c(5,9,3,15,6,2,8,12) vec6=c(2,5,8,11,7,4,10,3) 加法 vec4+vec6 7 14 11 26 13 6 18 15 減法 vec4-vec6 3 4 -5 4 -1 -2 -2 9 乘法 vec4*vec6 10 45 24 165 42 8 80 36 除法 vec4/vec6 2.5 1.8 0.375 1.364 0.857 0.5 0.8 4 取餘數 vec4 %% vec6 1 4 3 4 6 2 8 0 取除數 vec4 %/% vec6 2 1 0 1 0 0 0 4 內積 vec4 %*% vec6 410 向量與元素運算 一組向量與一個元素之間的運算，即是將向量中的每一個元素分別與該元素運算。 vec6+5 ## [1] 7 10 13 16 12 9 15 8 vec6*5 ## [1] 10 25 40 55 35 20 50 15 ⌾ 轉換資料型態 文字轉換為數值 建立vec_cha文字資料 vec_cha=c(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;) 先利用class()函式檢查vec_cha資料型態 class(vec_cha) ## [1] &quot;character&quot; 利用as.numeric()函式轉化為數值資料 as.numeric(vec_cha) ## [1] 1 2 3 4 5 數值轉換為文字 另外，可利用as.character()函式轉化為文字資料 vec_num=c(1,2,3,4,5) as.character(vec_num) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; ⌾ 建立重複資料 利用rep()函式建立重複資料，該函式主要有兩大引數可以設定： each=是設定每一個元素重複的次數 times=是設定該向量整體循環的次數 以實際範例說明之，程式碼撰寫如下： vec6=c(2,5,8,11,7,4,10,3) # 設定每一個元素重複的次數 rep(vec6, each=2) ## [1] 2 2 5 5 8 8 11 11 7 7 4 4 10 10 3 3 # 設定向量整體重複的次數 rep(vec6, times=2) ## [1] 2 5 8 11 7 4 10 3 2 5 8 11 7 4 10 3 ⌾ 回傳向量中 TRUE 索引值 which()函式可用以回傳向量中 TRUE 的索引值。 TRUE 索引值 vec3=c(T,F,T,F,T) which(vec3) ## [1] 1 3 5 由上述範例可知，TRUE 位於vec3向量的第 1、3、5 個元素。 回傳符合條件索引值 除了上述基本案例外，通常我們會藉由運算子（==, &gt;, &lt;, …）以尋找符合條件的元素，並進一步透過which()函式回傳結果為 TRUE 的索引值。範例如下。 vec6=c(2,5,8,11,7,4,10,3) # vec6大於5的邏輯判斷 vec6&gt;5 ## [1] FALSE FALSE TRUE TRUE TRUE FALSE TRUE FALSE # 回傳vec6大於5的索引值 which(vec6&gt;5) ## [1] 3 4 5 7 1.1.2 因子（Factor） ⌾ 因子的性質 由文字向量建立 須設定文字層級 設立因子的延伸應用： 在ggplot2套件中調整圖例順序 在計量模型中建立啞變量（dummy variables） ⌾ 建立因子 因子的建立可以使用factor()函式，其中必須透過levels=引數設定層級，程式碼建構如下： factor(文字向量, levels=期望的層級向量) 以下列簡單範例說明因子的功能，建立school之文字向量。 school=c(&quot;大學&quot;,&quot;幼稚園&quot;,&quot;國小&quot;,&quot;高中&quot;,&quot;國中&quot;) 若欲將school轉換為具有層級意義的因子，並依據學校層級排序，則程式碼撰寫如下： school_fc=factor(school, levels=c(&quot;幼稚園&quot;,&quot;國小&quot;,&quot;國中&quot;,&quot;高中&quot;,&quot;大學&quot;)) school_fc ## [1] 大學 幼稚園 國小 高中 國中 ## Levels: 幼稚園 國小 國中 高中 大學 由上述可發現，有別於文字向量，因子會另出現「Levels:」的訊息，表示文字具有層級意義。 最後可利用is.factor()函式判斷一變數是否為因子，抑或利用class()函式逕查詢該變數的資料型態。 is.factor(school_fc) ## [1] TRUE class(school_fc) ## [1] &quot;factor&quot; 上述所建立的因子具有層級意義，故可以排序，可進一步利用sort()函式排序，程式碼如下： sort(school_fc) ## [1] 幼稚園 國小 國中 高中 大學 ## Levels: 幼稚園 國小 國中 高中 大學 ⌾ 建立有序因子 上述所建立的因子具有層級意義，可以排序，然而各元素間不具有大小意義，無法直接比較大小值。以school_fc為例，我們所設定的「大學」層級高於「幼稚園」，然而這不意謂著大學&gt;幼稚園。因此若直接拿兩元素相比較大小，程式會出現警告（大小關係對因子無意義），且回傳NA，試驗如下： school_fc[1]&gt;school_fc[2] ## Warning in Ops.factor(school_fc[1], school_fc[2]): &#39;&gt;&#39; 對因子沒有意義 ## [1] NA 若欲建立具大小關係的因子，則需在factor()函式中設定order=T引數，以表達具有順序意義。 school_order=factor(school, levels=c(&quot;幼稚園&quot;,&quot;國小&quot;,&quot;國中&quot;,&quot;高中&quot;,&quot;大學&quot;), order=T) school_order ## [1] 大學 幼稚園 國小 高中 國中 ## Levels: 幼稚園 &lt; 國小 &lt; 國中 &lt; 高中 &lt; 大學 由輸出結果可發現，層級中具有「&lt;」符號，用以表達有序之大小關係。 # 比較幼稚園與大學的大小關係 school_order[1]&gt;school_order[2] ## [1] TRUE ⌾ 轉換資料型態 可透過as.character()將因子轉換為單純的文字向量，亦可藉由as.numeric()將因子轉換為數值，而該數值乃依據層級的大小給定，層級越高（後）者，數值愈大。以上述school_fc為案例說明。 # 轉換為文字向量 as.character(school_fc) ## [1] &quot;大學&quot; &quot;幼稚園&quot; &quot;國小&quot; &quot;高中&quot; &quot;國中&quot; # 轉換為數值向量 as.numeric(school_fc) ## [1] 5 1 2 4 3 1.1.3 矩陣（Matrix） ⌾ 矩陣的性質 二維 含括多個橫列（rows）與直行（columns） 可以組合「相同」資料型態的向量 (文字向量、數值向量、邏輯向量) ⌾ 建立矩陣 利用matrix()函式建立矩陣，其中必須設定兩引數： nrow= 設定矩陣的橫列數 ncol= 設定矩陣的直行數 matrix(向量, nrow=, ncol=) 範例如下： mat1=matrix(c(1:15), nrow=3, ncol=5) mat1 ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 4 7 10 13 ## [2,] 2 5 8 11 14 ## [3,] 3 6 9 12 15 由回傳結果可發現，該矩陣是先由上至下，再由左至右填入向量。若希望矩陣的填法是先由左至右，再由上至下，則須設定引數byrow=T，程式碼撰寫如下。 mat2=matrix(c(1:15), nrow=3, ncol=5, byrow=T) mat2 ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 2 3 4 5 ## [2,] 6 7 8 9 10 ## [3,] 11 12 13 14 15 ⌾ 查看矩陣的維度 矩陣是二維的資料，若要進一步該二維資料中的橫列與直行個數，可利用nrow()與ncol()函式分別查看，或逕利用dim()函式查看之。 nrow(mat2) ## [1] 3 ncol(mat2) ## [1] 5 dim(mat2) ## [1] 3 5 ⌾ 回傳矩陣的特定元素 利用中括號[ , ]可回傳特定元素的值，其中逗點前必須放置橫列的索引值，而逗點後則是直行的索引值。 以第 2 橫列第 4 行為例，程式碼撰寫如下。 mat2[2, 4] ## [1] 9 ⌾ 轉置矩陣 藉由t()函式將矩陣予以轉置（transpose）。 t(mat2) ## [,1] [,2] [,3] ## [1,] 1 6 11 ## [2,] 2 7 12 ## [3,] 3 8 13 ## [4,] 4 9 14 ## [5,] 5 10 15 ⌾ 矩陣運算 矩陣的運算是 R 語言的利器，執行效率相當高，在許多統計模型背後的運算亦是牽涉複雜的矩陣運算。以下簡單介紹重要的運算函式。 橫列與直行運算 橫列與直行的加總與平均值計算彙整如表1.4。 表 1.4: 矩陣運算 加總 平均 橫列 rowSums(mat2) rowMeans(mat2) 15 40 65 3 8 13 直行 colSums(mat2) colMeans(mat2) 18 21 24 27 30 6 7 8 9 10 apply()函式應用 試想若沒有1.4中的各個函式用以處理矩陣資料，我們可以透過for()迴圈逐行或逐列針對矩陣運算，以橫列加總（rowSums）為例，程式碼撰寫如下。 for(i in c(1:nrow(mat2))){ cat(sum(mat2[i,]), &quot; &quot;) } ## 15 40 65 然而如是的寫法效率極差，在 R 語言中類似 for() 迴圈的程序可以考慮更高效率的apply()函式取代之，程式語法如下： apply(矩陣資料, 方向, 運算函式) 其中方向有兩種選擇：1表示逐列（row）運算；2表示逐行（column）運算。運算函式可為前述向量運算的任一函式。apply()函式的運算概念如圖1.2之示意圖。 圖 1.2: apply()函式運算示意圖 再次以mat2矩陣為範例，程式碼撰寫如下。 # 逐列加總 (=rowSums) apply(mat2, 1, sum) ## [1] 15 40 65 # 逐行平均 (=colMeans) apply(mat2, 2, mean) ## [1] 6 7 8 9 10 # 逐列尋找最大值索引值 apply(mat2, 1, which.max) ## [1] 5 5 5 # 逐行計算標準差 apply(mat2, 2, sd) ## [1] 5 5 5 5 5 1.1.4 資料框（Data Frame） ⌾ 資料框的性質 類似矩陣（Matrix），但可涵括多種不同的資料型態 功能類似 Excel 的工作表 資料分析中最常見的資料型態 可利用dplyr套件處理資料 (參見dplyr資料處理) ⌾ 建立資料框 資料框的建立如下程式碼： data.frame(VAR1=c(), VAR2=c(), VAR3=c(), ...) VAR1、VAR2、VAR3 皆表示資料框中的變數名稱，亦即表格中的表頭名。 以下簡單範例說明資料框的建構。 StuScore=data.frame(StudentID=c(&quot;ID1&quot;,&quot;ID2&quot;,&quot;ID3&quot;,&quot;ID4&quot;,&quot;ID5&quot;), Name=c(&quot;Bob&quot;,&quot;Mary&quot;,&quot;Robert&quot;,&quot;Jason&quot;,&quot;Jane&quot;), Score=c(60,80,40,50,100)) StuScore ## StudentID Name Score ## 1 ID1 Bob 60 ## 2 ID2 Mary 80 ## 3 ID3 Robert 40 ## 4 ID4 Jason 50 ## 5 ID5 Jane 100 ⌾ 回傳資料欄位名稱 colnames(StuScore) # 或可以直接使用names()函式 names(StuScore) ## [1] &quot;StudentID&quot; &quot;Name&quot; &quot;Score&quot; ⌾ 回傳特定欄列 回傳指定橫列 將列號或邏輯向量置於中括號內的逗號前，惟須注意，使用邏輯向量時，其長度必須與資料列數相同。程式碼撰寫如下。 # 使用列號 StuScore[c(1,3,5),] # 使用邏輯向量 StuScore[c(T,F,T,F,T),] ## StudentID Name Score ## 1 ID1 Bob 60 ## 3 ID3 Robert 40 ## 5 ID5 Jane 100 回傳指定直行 有三種方法可回傳指定（多個）直行，包括： 列號向量 邏輯向量 欄位名稱向量 其中使用邏輯向量時，其長度與資料行數必須相同。程式碼撰寫如下。 # 列號向量 StuScore[, c(1,2)] # 邏輯向量 StuScore[, c(T,F,T,F,T)] # 欄位名稱向量 StuScore[, c(&quot;StudentID&quot;,&quot;Name&quot;)] ## StudentID Name ## 1 ID1 Bob ## 2 ID2 Mary ## 3 ID3 Robert ## 4 ID4 Jason ## 5 ID5 Jane 此外，資料框亦可透過「$」回傳特定單一欄位，程式碼撰寫如下。 資料$欄位名稱 StuScore$Name ## [1] &quot;Bob&quot; &quot;Mary&quot; &quot;Robert&quot; &quot;Jason&quot; &quot;Jane&quot; ⌾ 回傳與編輯指定元素 使用行列索引值 資料[橫列索引, 直行索引] StuScore[2,2] ## [1] &quot;Mary&quot; 編輯指定元素 StuScore[2,2]=&quot;Jessica&quot; StuScore ## StudentID Name Score ## 1 ID1 Bob 60 ## 2 ID2 Jessica 80 ## 3 ID3 Robert 40 ## 4 ID4 Jason 50 ## 5 ID5 Jane 100 ⌾ 查看前後六筆資料 在此我們使用 R 語言內建的iris資料說明。iris資料共計 150 個樣本，並含括三種不同的鳶尾花（setosa、virginica、versicolor），欄位則包含花瓣與花萼的長度與寬度。 回傳前六筆資料 head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa 回傳後六筆資料 tail(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica ⌾ 擴增資料框 擴增資料列（新增紀錄） 若欲新增資料，可以透過rbind()函式連結。程式碼如下。 # 建立欲新增的資料 new_student=data.frame(StudentID=&quot;ID6&quot;, Name=&quot;Roy&quot;, Score=90) # 利用rbind()函式相接 StuScore=rbind(StuScore, new_student) StuScore ## StudentID Name Score ## 1 ID1 Bob 60 ## 2 ID2 Jessica 80 ## 3 ID3 Robert 40 ## 4 ID4 Jason 50 ## 5 ID5 Jane 100 ## 6 ID6 Roy 90 擴增資料欄（新增屬性） 若欲針對整份資料新增屬性（如StuScore中增加性別欄位…），可以透過cbind()函式連結。程式碼如下。 # 建立欲新增之屬性 Gender=c(&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;) # 利用cbind()函式連結 StuScore=cbind(StuScore, Gender) StuScore ## StudentID Name Score Gender ## 1 ID1 Bob 60 M ## 2 ID2 Jessica 80 F ## 3 ID3 Robert 40 M ## 4 ID4 Jason 50 M ## 5 ID5 Jane 100 F ## 6 ID6 Roy 90 M 或可以直接透過「$」新增新欄位內容。程式碼如下： 資料$新欄位=c(...) StuScore$Height=c(180,165,170,160,175,180) StuScore ## StudentID Name Score Gender Height ## 1 ID1 Bob 60 M 180 ## 2 ID2 Jessica 80 F 165 ## 3 ID3 Robert 40 M 170 ## 4 ID4 Jason 50 M 160 ## 5 ID5 Jane 100 F 175 ## 6 ID6 Roy 90 M 180 ⌾ 檢查重複列 為說明範例，在此先行建立一句有重複資料的資料框。 StuScore_dup=data.frame(StudentID=c(&quot;ID1&quot;,&quot;ID2&quot;,&quot;ID4&quot;,&quot;ID3&quot;,&quot;ID4&quot;,&quot;ID5&quot;,&quot;ID2&quot;), Name=c(&quot;Bob&quot;,&quot;Mary&quot;,&quot;Jason&quot;,&quot;Robert&quot;,&quot;Jason&quot;,&quot;Jane&quot;,&quot;Mary&quot;), Score=c(60,80,40,100,40,100,80)) StuScore_dup ## StudentID Name Score ## 1 ID1 Bob 60 ## 2 ID2 Mary 80 ## 3 ID4 Jason 40 ## 4 ID3 Robert 100 ## 5 ID4 Jason 40 ## 6 ID5 Jane 100 ## 7 ID2 Mary 80 由上述結果可知，資料中含有重複的橫列（ID2 &amp; ID4）。我們可以進一步利用duplicated()函式檢查之。 duplicated(StuScore_dup) ## [1] FALSE FALSE FALSE FALSE TRUE FALSE TRUE # 使用which()函式尋找重複的資料列索引 which(duplicated(StuScore_dup)) ## [1] 5 7 由執行結果可知，第 5 與第 7 筆資料屬於重複資料。請務必注意，資料框中首次出現的列不會被視為重複者。 1.1.5 陣列（List） ⌾ 陣列的性質 物件的集合（可包含向量、矩陣、資料框、陣列…） 最複雜的物件，然其使用彈性相當高 ⌾ 建立陣列 使用list()函式建立陣列資料。 StuScore_list=list(StudentID=c(&quot;ID1&quot;,&quot;ID2&quot;,&quot;ID3&quot;,&quot;ID4&quot;,&quot;ID5&quot;), Name=c(&quot;Bob&quot;,&quot;Mary&quot;,&quot;Robert&quot;,&quot;Jason&quot;,&quot;Jane&quot;), Score=c(60,80,40,50,100), Class=&quot;A&quot;) ## $StudentID ## [1] &quot;ID1&quot; &quot;ID2&quot; &quot;ID3&quot; &quot;ID4&quot; &quot;ID5&quot; ## ## $Name ## [1] &quot;Bob&quot; &quot;Mary&quot; &quot;Robert&quot; &quot;Jason&quot; &quot;Jane&quot; ## ## $Score ## [1] 60 80 40 50 100 ## ## $Class ## [1] &quot;A&quot; ⌾ 回傳陣列屬性 使用陣列$屬性回傳 StuScore_list$Score ## [1] 60 80 40 50 100 使用陣列索引回傳 StuScore_list[[2]] ## [1] &quot;Bob&quot; &quot;Mary&quot; &quot;Robert&quot; &quot;Jason&quot; &quot;Jane&quot; ⌾ 陣列長度 向量的長度可以利用length()函式計算，而陣列亦同，程式碼撰寫如下。 # 建立陣列 num_list=list(c(1:5), c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;), c(T,F,T)) num_list ## [[1]] ## [1] 1 2 3 4 5 ## ## [[2]] ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; ## ## [[3]] ## [1] TRUE FALSE TRUE # 計算陣列長度 length(num_list) ## [1] 3 由此可知，num_list的長度為 3。而若欲知該陣列內各別陣列的長度，則必須透過lengths()函數達成此一目的。程式碼撰寫如下，陣列長度的計算詳如圖1.3之示意圖所示。 # 計算陣列內各陣列長度 lengths(num_list) ## [1] 5 4 3 由此可知，num_list陣列內第一個陣列的長度為 5，其次為 3，最後一者為 4。 圖 1.3: 陣列長度示意圖 若欲將陣列去除，並回傳所有陣列中的元素，則可使用unlist()達成之。 # 去除陣列 unlist(num_list) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; ## [10] &quot;TRUE&quot; &quot;FALSE&quot; &quot;TRUE&quot; 1.2 文字處理 在資料分析中，文字處理是相當重要的程序，可從中解析特定的詞彙，如計算詞彙數量、取代特定字詞、查看文字出現位置等等，從中探索資料中的文字內容。文字處理可以透過 R 內建的base套件或另安裝stringr套件處理之，本節主要即是針對此二套件說明文字處理之應用。 install.packages(&quot;stringr&quot;) library(stringr) 本節中所論及的函式彙整如表1.5。 表 1.5: 文字處理重要函式 套件 函式 功能 base paste() 連接字串 paste0() 連接字串（無分隔） toupper() 轉換為大寫 tolower() 轉換為小寫 substr() 擷取字元 strsplit() 拆解字串 gsub() 取代字元 nchar() 字串長度(字元數) grep() 回傳符合條件的索引值 grepl() 回傳是否含有特定字元 regexpr() 回傳特定字元首次出現的位置索引 stringr str_to_upper() 轉換為大寫 str_to_lower() 轉換為小寫 str_to_title() 首字大寫 str_which() 回傳符合條件的索引值 str_detect() 回傳是否含有特定字元 str_starts() 回傳是否以特定字元開頭 str_locate() 回傳特定字元首次出現的位置索引 str_locate_all() 回傳特定字元所有出現的位置索引 str_count() 回傳特定字元出現的次數 str_sub() 擷取字元（可進一步取代） str_replace_all() 取代字元 str_length() 字串長度(字元數) str_pad() 統一字串長度的格式 str_split() 拆解字串 str_flatten() 連接字串 str_glue() 連接字串（含變數） str_order() 回傳字串排序索引值 str_sort() 回傳字串排序後結果 1.2.1 連接字串 ⌾ paste()：以特定符號連接 paste(文字向量, collapse=&quot;分隔符號&quot;) collapse=引數須設定欲分隔字串的符號。 ⌾ paste0()：直接連接（無分隔） paste0()將向量內各元素直接連接，相當於paste(文字向量, collapse=\"\")。 paste0(文字向量) ⌾ str_flatten()：以特定符號連接 與paste()函式功能相同。 str_flatten(文字向量, collapse=&quot;分隔符號&quot;) collapse=引數須設定欲分隔字串的符號。 ⌾ str_glue()：連結字串與變數 str_glue(&quot;文字{變數}&quot;) 以下簡單示範連結字串之函式應用案例。 # 原始文字向量 transport=c(&quot;Bus&quot;, &quot;MRT&quot;, &quot;Car&quot;, &quot;Motorcycle&quot;, &quot;Bike&quot;, &quot;Taxi&quot;) all_name=&quot;Mode&quot; # paste()函式連結所有transport內的元素 paste(transport, collapse=&quot;|&quot;) ## [1] &quot;Bus|MRT|Car|Motorcycle|Bike|Taxi&quot; # paste()函式連結all_name與transport內各元素 paste(all_name, &quot;:&quot;, transport) ## [1] &quot;Mode : Bus&quot; &quot;Mode : MRT&quot; &quot;Mode : Car&quot; ## [4] &quot;Mode : Motorcycle&quot; &quot;Mode : Bike&quot; &quot;Mode : Taxi&quot; # paste0()函式連結all_name與transport內各元素 paste0(all_name, &quot;: &quot;, transport) ## [1] &quot;Mode: Bus&quot; &quot;Mode: MRT&quot; &quot;Mode: Car&quot; &quot;Mode: Motorcycle&quot; ## [5] &quot;Mode: Bike&quot; &quot;Mode: Taxi&quot; # str_flatten()函式連結所有transport內的元素 str_flatten(transport, collapse=&quot;|&quot;) ## [1] &quot;Bus|MRT|Car|Motorcycle|Bike|Taxi&quot; # str_glue()函式連結all_name與transport內各元素 str_glue(&quot;{all_name}: {transport}&quot;) ## Mode: Bus ## Mode: MRT ## Mode: Car ## Mode: Motorcycle ## Mode: Bike ## Mode: Taxi 1.2.2 轉換大小寫 ⌾ toupper()：全部轉換為大寫 toupper(文字向量) ⌾ tolower()：全部轉換為小寫 tolower(文字向量) ⌾ str_to_upper()：全部轉換為大寫 str_to_upper(文字向量) ⌾ str_to_lower()：全部轉換為小寫 str_to_lower(文字向量) ⌾ str_to_title()：首字大寫 str_to_title(文字向量) 以下簡單示範轉換字元大小寫之應用案例。 # 原始文字向量 transport=c(&quot;Bus&quot;, &quot;MRT&quot;, &quot;Car&quot;, &quot;Motorcycle&quot;, &quot;Bike&quot;, &quot;Taxi&quot;) all_name=&quot;Mode&quot; # toupper()函式轉換大寫 toupper(transport) ## [1] &quot;BUS&quot; &quot;MRT&quot; &quot;CAR&quot; &quot;MOTORCYCLE&quot; &quot;BIKE&quot; ## [6] &quot;TAXI&quot; # tolower()函式轉換小寫 tolower(transport) ## [1] &quot;bus&quot; &quot;mrt&quot; &quot;car&quot; &quot;motorcycle&quot; &quot;bike&quot; ## [6] &quot;taxi&quot; # str_to_upper()函式轉換大寫 str_to_upper(transport) ## [1] &quot;BUS&quot; &quot;MRT&quot; &quot;CAR&quot; &quot;MOTORCYCLE&quot; &quot;BIKE&quot; ## [6] &quot;TAXI&quot; # str_to_lower()函式轉換小寫 str_to_lower(transport) ## [1] &quot;bus&quot; &quot;mrt&quot; &quot;car&quot; &quot;motorcycle&quot; &quot;bike&quot; ## [6] &quot;taxi&quot; # toupper()函式首字大寫 str_to_title(&quot;national yang ming chiao tung university&quot;) ## [1] &quot;National Yang Ming Chiao Tung University&quot; 1.2.3 擷取與取代字元 ⌾ substr()：擷取字元 substr(文字向量, 開始字元索引, 結束字元索引) ⌾ gsub()：取代字元 gsub(&quot;被取代字元&quot;, &quot;新替換字元&quot;, 文字向量) ⌾ str_sub()：擷取並取代字元 # 擷取字元 str_sub(文字向量, 開始字元索引, 結束字元索引) # 取代指定位置的字元(此時以下的文字向量務必是變數) str_sub(文字向量, 開始字元索引, 結束字元索引)=&quot;新替換字元&quot; ⌾ str_replace_all()：取代字元 str_replace_all()可取代所有字元，而str_replace()僅能取代第一次出現的字元，應用性較低。 str_replace_all(文字向量, &quot;被取代字元&quot;, &quot;新替換字元&quot;) 以下簡單示範擷取與取代字元之應用案例。 # 原始文字向量 transport=c(&quot;Bus&quot;, &quot;MRT&quot;, &quot;Car&quot;, &quot;Motorcycle&quot;, &quot;Bike&quot;, &quot;Taxi&quot;) all_name=&quot;Mode&quot; # substr()擷取字元 substr(transport, 1, 3) ## [1] &quot;Bus&quot; &quot;MRT&quot; &quot;Car&quot; &quot;Mot&quot; &quot;Bik&quot; &quot;Tax&quot; # gsub()取代字元 gsub(&quot;a&quot;, &quot;?&quot;, transport) ## [1] &quot;Bus&quot; &quot;MRT&quot; &quot;C?r&quot; &quot;Motorcycle&quot; &quot;Bike&quot; ## [6] &quot;T?xi&quot; # str_sub()擷取字元 str_sub(transport, 1, 2) ## [1] &quot;Bu&quot; &quot;MR&quot; &quot;Ca&quot; &quot;Mo&quot; &quot;Bi&quot; &quot;Ta&quot; # str_sub()取代特定位置之字元 transport_new=transport str_sub(transport_new, 2, 3)=&quot;??&quot; transport_new ## [1] &quot;B??&quot; &quot;M??&quot; &quot;C??&quot; &quot;M??orcycle&quot; &quot;B??e&quot; ## [6] &quot;T??i&quot; # str_replace_all()擷取字元 str_replace_all(transport, &quot;[aeiou]&quot;, &quot;?&quot;) ## [1] &quot;B?s&quot; &quot;MRT&quot; &quot;C?r&quot; &quot;M?t?rcycl?&quot; &quot;B?k?&quot; ## [6] &quot;T?x?&quot; 以上範例中str_replace()函式的[aeiou]係指中括號內任一字元皆可被取代。關於此類符號的表達請參考正規表示式一節。 1.2.4 拆解字串 ⌾ strsplit()：拆解字串 strsplit(文字向量, &quot;切割符號&quot;) 程式碼中的「切割符號」係指在字串中用以切割字串的符號。 ⌾ str_split()：拆解字串 str_split()函式為stringr套件的函式，其與base套件中的strsplit函式完全相同。 str_split(文字向量, &quot;切割符號&quot;) 以下範例說明拆解字串的做法。 # 原始文字向量 transport_comb=c(&quot;Bus &amp; MRT &amp; Bike&quot;, &quot;Motorcycle &amp; Car&quot;, &quot;Taxi&quot;) # strsplit()拆解字串 strsplit(transport_comb, &quot; &amp; &quot;) ## [[1]] ## [1] &quot;Bus&quot; &quot;MRT&quot; &quot;Bike&quot; ## ## [[2]] ## [1] &quot;Motorcycle&quot; &quot;Car&quot; ## ## [[3]] ## [1] &quot;Taxi&quot; # str_split()拆解字串 str_split(transport_comb, &quot; &amp; &quot;) ## [[1]] ## [1] &quot;Bus&quot; &quot;MRT&quot; &quot;Bike&quot; ## ## [[2]] ## [1] &quot;Motorcycle&quot; &quot;Car&quot; ## ## [[3]] ## [1] &quot;Taxi&quot; 上述拆解完成後的字串，儲存於一陣列中，[[1]] 中即是transport_comb向量中第一個元素拆解後的結果，包含三個元素（Bus、MRT、Bike），其他則以此類推。此外我們亦可利用unlist()函式將所有拆解的結果從陣列中抽離出來，轉換成向量。程式碼撰寫如下。 # 拆解字串 word_split=strsplit(transport_comb, &quot; &amp; &quot;) # 去除陣列，轉換為向量 unlist(word_split) ## [1] &quot;Bus&quot; &quot;MRT&quot; &quot;Bike&quot; &quot;Motorcycle&quot; &quot;Car&quot; ## [6] &quot;Taxi&quot; 1.2.5 計算字元數 ⌾ nchar()：計算字串內所有字元數 nchar(文字向量) ⌾ str_length()：計算字串內所有字元數 抑或可利用stringr套件中的str_length()函式達成相同目的。 str_length(文字向量) # 建立向量 transport=c(&quot;Bus&quot;, &quot;MRT&quot;, &quot;Car&quot;, &quot;Motorcycle&quot;, &quot;Bike&quot;, &quot;Taxi&quot;) # nchar()計算長度 nchar(transport) ## [1] 3 3 3 10 4 4 # str_length()計算長度 str_length(transport) ## [1] 3 3 3 10 4 4 ⌾ str_count()：計算符合條件的字元數 str_count(文字向量, &quot;欲尋找字元&quot;) str_count(transport, &quot;[^aeiou]&quot;) ## [1] 2 3 2 7 2 2 程式碼中的[^aeiou]意指「不包含」「aeiou」任一字元者，因此「Bus」去除「u」之後，字元數為 2。此類符號的表達請參考正規表示式一節。 1.2.6 搜尋字元 透過搜尋字元，可以瞭解特定字元是否存在於一文字向量中，抑或進一步知道特定字元在向量各元素內的出現位置。 ⌾ grep()尋找特定字元存在索引 回傳結果為一索引值向量，若完全無符合條件者，會回傳integer(0)。 grep(&quot;欲尋找字元&quot;, 文字向量) ⌾ str_which()尋找特定字元存在索引 回傳結果為一索引值向量，若完全無符合條件者，會回傳integer(0)。 str_which(文字向量, &quot;欲尋找字元&quot;) ⌾ grepl()尋找特定字元存在與否 回傳結果為一邏輯向量，該向量長度與輸入的文字向量長度相同。 grepl(&quot;欲尋找字元&quot;, 文字向量) ⌾ str_detect()尋找特定字元存在與否 回傳結果為一邏輯向量，該向量長度與輸入的文字向量長度相同。 str_detect(文字向量, &quot;欲尋找字元&quot;) # 建立向量 transport=c(&quot;Bus&quot;, &quot;MRT&quot;, &quot;Car&quot;, &quot;Motorcycle&quot;, &quot;Bike&quot;, &quot;Taxi&quot;) # grep()尋找字元存在之索引 grep(&quot;a|c&quot;, transport) # str_which()尋找字元存在之邏輯值 str_which(transport, &quot;a|c&quot;) # grepl()尋找字元存在之邏輯值 grepl(&quot;a|c&quot;, transport) # str_detect()尋找字元存在之邏輯值 str_detect(transport, &quot;a|c&quot;) 程式碼中，a|c表示 a 或者 c，相當於[ac]，關於此類符號的表達請參考正規表示式一節。 ⌾ str_starts()查看是否以特定字元起始 程式碼中所設定的引數「欲尋找字元」，會尋找文字向量中各元素是否會以該字元為開頭。 str_starts(文字向量, &quot;欲尋找字元&quot;) 再次以transport向量為例，程式碼撰寫如下。 str_starts(transport, &quot;B&quot;) ## [1] TRUE FALSE FALSE FALSE TRUE FALSE 回傳結果顯示第一個元素（Bus）與第五個元素（Bike）符合所設定規則。 上述是查看特定字元是否存在於向量中，輸出結果為邏輯向量或索引值向量。然有時我們會希望瞭解該特定字元位於向量各元素中的位置，此時可利用regexpr()與str_locate()函式達成目的。 ⌾ regexpr()尋找特定字元「首次」出現位置 回傳結果為一索引值向量，該向量長度與輸入的文字向量長度相同。若元素無該字元，會回傳-1。 regexpr(&quot;欲尋找字元&quot;, 文字向量) ⌾ str_locate()尋找特定字元「首次」出現位置 回傳結果為一矩陣（matrix），該矩陣的橫列數（nrow()）為輸入的文字向量之長度，而直行有兩個，其一為 start，表示字元開始的索引；另一為 end，表示字元結束的索引。若元素無該字元，會回傳NA。 str_locate(文字向量, &quot;欲尋找字元&quot;) # 建立向量 fruit_eg=c(&quot;papaya&quot;, &quot;grape&quot;, &quot;lychee&quot;, &quot;apple&quot;, &quot;guava&quot;, &quot;coconut&quot;) # grepl()尋找字元出現位置 regexpr(&quot;a&quot;, fruit_eg) ## [1] 2 3 -1 1 3 -1 ## attr(,&quot;match.length&quot;) ## [1] 1 1 -1 1 1 -1 ## attr(,&quot;index.type&quot;) ## [1] &quot;chars&quot; ## attr(,&quot;useBytes&quot;) ## [1] TRUE 回傳結果第一列係顯示 a 字元第一次出現於fruit_eg向量各元素中的索引位置，如第一個元素「papaya」，其首次出現 a，是位於第二個字元，故回傳結果為「2」。此外，以第三個元素「lychee」為例，由於該元素內並無 a 字元，故回傳結果為「-1」。 # str_locate()尋找字元出現位置 str_locate(fruit_eg, &quot;a&quot;) ## start end ## [1,] 2 2 ## [2,] 3 3 ## [3,] NA NA ## [4,] 1 1 ## [5,] 3 3 ## [6,] NA NA 利用str_locate()函式所得結果更為直接，其顯示字元出現的起迄位置，如回傳結果第一列係指第一個元素「papaya」首次出現 a，是位於第二個字元；而第三列的「NA」則表示該字元未出現於第三個元素中。 ⌾ str_locate_all()尋找特定字元「所有」出現位置 然而由上述範例可知，無論是regexpr()或是str_locate()函式接僅能回傳首次出現字元的位置，若希望能回傳所有結果，可使用str_locate_all()函式，引數設定方式與str_locate()相同，回傳結果則包含各元素內所有出現特定字元的起迄位置，並以陣列（list）顯示，有別於str_locate()係以矩陣表示。程式碼撰寫如下。 # str_locate_all()尋找字元所有出現位置 str_locate_all(fruit_eg, &quot;a&quot;) ## [[1]] ## start end ## [1,] 2 2 ## [2,] 4 4 ## [3,] 6 6 ## ## [[2]] ## start end ## [1,] 3 3 ## ## [[3]] ## start end ## ## [[4]] ## start end ## [1,] 1 1 ## ## [[5]] ## start end ## [1,] 3 3 ## [2,] 5 5 ## ## [[6]] ## start end 回傳結果為一陣列，陣列中共有 6 個子陣列，分別代表fruit_eg向量中各元素的執行結果。其中第一個陣列 [[1]] 的矩陣內橫列數（nrow()）為 3，表示在「papaya」元素中共找到 3 個符合條件的字元，而其位置分別為第 2、4、6 個字元。若未找到符合條件的字元，則逕顯示表頭（start、end），其橫列數為 0。 ⌾ 合併使用尋找字元與擷取字元 在實務資料分析時，我們很常在一文字向量中尋找特定字元並依據特定字元擷取段落，此時有賴於尋找及擷取兩種不同功能的函式。範例如下。 以鄉鎮市區的名稱擷取為例，由於全臺灣行政區的名稱長度落於 2 至 4 字之間，無法單純藉由substr()直接鎖定位置，故應先尋找出「鄉鎮市區」字元所在的位置，再進一步擷取。得知該位置後，擷取的字元必須自第一個開始，結束於上述「鄉鎮市區」的位置減 1。程式碼傳寫如下。 # 建立文字向量 cha_vec=c(&quot;竹北市&quot;,&quot;東區&quot;,&quot;那瑪夏區&quot;,&quot;羅東鎮&quot;,&quot;太麻里鄉&quot;) # 先利用regexpr()搜尋「鄉鎮市區」的位置 district_loc=regexpr(&quot;[鄉鎮市區]&quot;, cha_vec) # regexpr(&quot;鄉|鎮|市|區&quot;, cha_vec) # 或利用「|」 district_loc ## [1] 3 2 4 3 4 ## attr(,&quot;match.length&quot;) ## [1] 1 1 1 1 1 # 接著利用substr()擷取字元 (注意必須減1) substr(cha_vec, 1, district_loc-1) ## [1] &quot;竹北&quot; &quot;東&quot; &quot;那瑪夏&quot; &quot;羅東&quot; &quot;太麻里&quot; 1.2.7 文字填補 文字填補可使向量中所有文字皆為固定長度，使文字格式得以統一，在stringr套件中可利用str_pad()函式填補字元。 ⌾ str_pad()填補字元 str_pad(文字向量, width=, side=, pad=&quot;填補字元&quot;) 在上述程式碼中所需設定的引數彙整如下： width=設定文字的寬度，如希望的統一字串格式為「5」個字元，則設定「width=5」 side=設定填補的方向，包含right與left pad=設定欲填補的字元，如希望統一補上「A」字元，則設定「pad=\"A\"」 實際範例如下。 # 建立向量 num_pad=seq(2, 20, 2) # 若希望以0填補於文字最前方，並須為三個字元 str_pad(num_pad, width=3, side=&quot;left&quot;, pad=&quot;0&quot;) ## [1] &quot;002&quot; &quot;004&quot; &quot;006&quot; &quot;008&quot; &quot;010&quot; &quot;012&quot; &quot;014&quot; &quot;016&quot; &quot;018&quot; &quot;020&quot; 1.2.8 文字排序 向量排序是利用sort()、order()、rank()等達成目的（參見向量排序小節），而在文字分析中可以利用str_sort()與str_order()達成之。文字的排序係以 UTF-8 編碼順序為原則。程式碼傳如下。 ⌾ str_sort()排序 str_sort(文字向量) ⌾ str_order()取得排序索引 str_order(文字向量) 實際範例如下。 # 建立向量 transport=c(&quot;Bus&quot;, &quot;MRT&quot;, &quot;Car&quot;, &quot;Motorcycle&quot;, &quot;Bike&quot;, &quot;Taxi&quot;) # 排序 str_sort(transport) ## [1] &quot;Bike&quot; &quot;Bus&quot; &quot;Car&quot; &quot;Motorcycle&quot; &quot;MRT&quot; ## [6] &quot;Taxi&quot; # 排序索引 str_order(transport) ## [1] 5 1 3 4 2 6 1.2.9 正規表示式 正規表示式（Regular Expression）是各程式語言中的標準格式，可藉此做進階的文字處理，擴充上述小節中文字取代、搜尋等功能的彈性，若能掌握此技巧，得以提升文字探勘的能力。常用的正規表示式彙整如表1.6。 表 1.6: 文字符號規則 符號 意義 符號 意義 \\\\ 符號（如：\\\\.表示「.」\\\\\\表示「\\」） + 連接一個或多個未知字元（如：ab+表示 ab 後面需加一個或多個字元） \\\\n 換行 ? 連接零個或一個未知字元（如：ab?表示 ab 後面可接一個或不接任何字元） \\\\t tab {n} 連接前一個字元 n 次（如：a{5}表示 a 重複 5 次） \\\\s 空白 [] 任一字元（如：[abc]表示「a、b、c」任一字元） \\\\S 非空白 [^] 排除..的其他字元（如：[^abc]表示不包含「a、b、c」此三者的其他字元） \\\\d 數值 [-] 範圍（如：[a-c]表示 a 至 c 所有字元） \\\\D 非數值 ^ 以…為起始字元（如^abc即是以 abc 為起始字元） \\\\w 文字 $ 以…為結尾字元（如abc$即是以 abc 為結尾字元） \\\\W 非文字 (?=) 字元後方必須為特定字元者（如：a(?=b)表示 a 後面必須接 b 字元者） | 或者（如：a|b即是 a 或者 b） (?!) 字元後方必須非特定字元者（如：a(?!b)表示 a 後面非接 b 字元者） * 連接零個或多個未知字元（如：ab*表示 ab 後面可接或不接任何字元） 關於正規表示式的詳細說明請參考此。 1.3 資料讀取與匯出 ⌾ 讀取資料 由本機讀取 於read.csv()函式中填入資料的路徑，資料型態可為：.csv 或 .txt 檔案。 read.csv(&quot;路徑&quot;) 路徑可以透過「斜線」或「雙反斜線」編寫。 # 斜線 read.csv(&quot;C:/Users/USER/Downloads/world.csv&quot;) # 雙反斜線 read.csv(&quot;C:\\\\Users\\\\USER\\\\Downloads\\\\world.csv&quot;) 由網站讀取 於read.csv()函式中填入資料的網址（url）。 read.csv(&quot;url&quot;) world=read.csv(&quot;https://raw.githubusercontent.com/ChiaJung-Yeh/R-Code-Sharing/main/R_Preliminary/world.csv&quot;) world資料讀取結果如下 此外，read.csv()函式有諸多引數可供設定，以下簡要說明各引數的功能及設定方式： header=設定是否有表頭，若有應設定為T，否則預設為F。 sep=設定分隔符號，例如常見的 .csv 檔即為「逗號」分隔。此引數預設為「,」，若非逗點分隔，需設定此參數，如「\\t」為「tab」分隔。 colClasses=設定各欄位的資料型態，如已知 A 欄位為數值型態；B 欄位為文字型態，則應設定：c(\"A\"=\"numeric\", \"B\"=\"character\")。 nrows=設定擷取的橫列數。 skip=設定跳過前幾筆資料。 fileEncoding=設定文字編碼，一般而言英文的編碼無須另外設定，然若是中文字則通常為「Big5」或「UTF-8」。 除了read.csv()函式可讀取資料外，亦可使用read.table()函式讀取，功能與引數完全相同。此外，data.table套件中的fread()亦可讀取資料，其所使用引數與read.csv()大致相同，亦可讀取本機及網路上的文字資料，惟讀取速度非常快，適合大數據資料的讀取。 fread(&quot;路徑&quot;) # 本機資料 fread(&quot;url&quot;) # 網路資料 # 範例 world=fread(&quot;https://raw.githubusercontent.com/ChiaJung-Yeh/R-Code-Sharing/main/R_Preliminary/world.csv&quot;) ⌾ 匯出資料 匯出資料可以使用write.csv()函式，程式撰寫如下： write.csv(資料, &quot;路徑&quot;) # 範例 write.csv(world, &quot;./world.csv&quot;) 在write.csv()函式中，主要的引數如下： row.names=設定是否回傳橫列名稱，預設為T，若不希望匯出列名稱，則須設定為F。 sep=設定分隔符號。 fileEncoding=設定文字編碼，一般而言英文的編碼無須另外設定，然若是中文字則通常為「Big5」或「UTF-8」。 同樣地，write.csv()函式在匯出資料的效率並不高，可以使用data.table套件中的fwrite()函式，以減少程式執行的時間，在大數據資料之處理上尤為實用。 1.4 資料清洗與處理 資料清洗與處理是分析前的第一步，透過此一步驟可初步觀察資料的趨勢，並以圖表呈現敘述統計結果。此外，在經過完善的資料整理後，尚能進一步建構統計模型或數據分析工具以瞭解資料背後所衍伸之意涵。dplyr與data.table套件是 R 語言中兩大最常見的資料處理工具，請務必安裝並導入該套件。 資料清洗與處理常用之套件與函式彙整如表1.7。 表 1.7: 資料處理重要函式 Package Functions Usage base merge() 根據指定欄位合併兩資料（同left_join()） dplyr select() 選取特定欄位 filter() 根據條件篩選資料 mutate() 新增資料屬性（欄位） group_by() 將資料依據特定欄位分群，後方經常連結filter()或reframe() reframe() 將分群的資料予以計算 slice() 依據條件擷取特定欄位 left_join() 根據指定欄位合併兩資料 arrange() 根據指定欄位將資料排序 rename() 更改欄位名稱 distinct() 去除重複資料 data.table dcast() 轉換長資料為寬資料 melt() 轉換寬資料為長資料 "]]
